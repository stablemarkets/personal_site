time_mu = exp(  L %*% beta_t + .1*A )
time_phi = 2
time = rgamma(n, shape = (time_mu^2)/time_phi, scale = time_phi/time_mu )
rst = pmin(time, tau)
cen_mu = exp(.09 +  L %*% beta_t + .1*A + - .2 * L[,2] * L[,4] +.2*L[,2] * L[,3]  )
cen_phi = 2
cen = rgamma(n, shape = (cen_mu^2)/cen_phi, scale = cen_phi/cen_mu )
if(!is.null(interv)){
cen=Inf
}
W = pmin(rst, cen)
delta = 1*(rst<cen)
#W= pmin(time, cen)
#delta = 1*(time<cen)
beta_y = c(0, .1,-.1, .1, -.1)
y_shape = (W/2)^2
y_scale = exp( -.5*A + L %*% beta_y - .2 * L[,2] * L[,4] +.2*L[,2] * L[,3] )
Yw = rgamma(n, shape = y_shape, scale = y_scale)
if(is.null(interv)){
return(data.frame( L[,-1] , A , W , Yw , delta ) )
}else{
return(mean( W*1 - Yw ) )
}
}
d = sim_data(n=2000, tau=20)
plot(d$W , d$Yw )
plot(d$L4, d$Yw, col=ifelse(d$L1==1,'red','black'))
plot(d$L4, d$W, col=ifelse(d$L1==1,'red','black'))
plot(d$L3, d$W, col=ifelse(d$L1==1,'red','black'))
sim_data = function(n=500, interv=NULL, tau){
L = cbind(1, L1 = rbinom(n, 1, .5), L2=rbinom(n, 1,.5), L3=rnorm(n), L4=rnorm(n))
if(!is.null(interv)){
A = rep(interv, n)
tau = 18
}else{
beta_a = c(0, .1, -1., .1, -.1)
A = rbinom(n, 1, invlogit( L %*% beta_a   )  )
tau = Inf
}
beta_t = c(2.5, .5, -.1, .1, -.1)
time_mu = exp(  L %*% beta_t + .1*A )
time_phi = 2
time = rgamma(n, shape = (time_mu^2)/time_phi, scale = time_phi/time_mu )
rst = pmin(time, tau)
cen_mu = exp(.09 +  L %*% beta_t + .1*A + - .2 * L[,2] * L[,4] +.2*L[,2] * L[,3]  )
cen_phi = 2
cen = rgamma(n, shape = (cen_mu^2)/cen_phi, scale = cen_phi/cen_mu )
if(!is.null(interv)){
cen=Inf
}
W = pmin(rst, cen)
delta = 1*(rst<cen)
#W= pmin(time, cen)
#delta = 1*(time<cen)
beta_y = c(0, .1,-.1, .1, -.1)
y_shape = (W/2)^2
y_scale = exp( -.5*A + L %*% beta_y - .2 * L[,2] * L[,4] +.2*L[,2] * L[,3] )
Yw = rgamma(n, shape = y_shape, scale = y_scale)
if(is.null(interv)){
return(data.frame( L[,-1] , A , W , Yw , delta ) )
}else{
return(mean( W*1 - Yw ) )
}
}
d = sim_data(n=2000, tau=20)
plot(d$W , d$Yw )
plot(d$L4, d$Yw, col=ifelse(d$L1==1,'red','black'))
plot(d$L4, d$W, col=ifelse(d$L1==1,'red','black'))
plot(d$L3, d$W, col=ifelse(d$L1==1,'red','black'))
sim_data = function(n=500, interv=NULL, tau){
L = cbind(1, L1 = rbinom(n, 1, .5), L2=rbinom(n, 1,.5), L3=rnorm(n), L4=rnorm(n))
if(!is.null(interv)){
A = rep(interv, n)
tau = 18
}else{
beta_a = c(0, .1, -1., .1, -.1)
A = rbinom(n, 1, invlogit( L %*% beta_a   )  )
tau = Inf
}
beta_t = c(2.5, .5, -.1, .1, -.1)
time_mu = exp(  L %*% beta_t + .1*A )
time_phi = 2
time = rgamma(n, shape = (time_mu^2)/time_phi, scale = time_phi/time_mu )
rst = pmin(time, tau)
cen_mu = exp(.09 +  L %*% beta_t + .1*A + - 1 * L[,2] * L[,4] + 1*L[,2] * L[,3]  )
cen_phi = 2
cen = rgamma(n, shape = (cen_mu^2)/cen_phi, scale = cen_phi/cen_mu )
if(!is.null(interv)){
cen=Inf
}
W = pmin(rst, cen)
delta = 1*(rst<cen)
#W= pmin(time, cen)
#delta = 1*(time<cen)
beta_y = c(0, .1,-.1, .1, -.1)
y_shape = (W/2)^2
y_scale = exp( -.5*A + L %*% beta_y - .2 * L[,2] * L[,4] +.2*L[,2] * L[,3] )
Yw = rgamma(n, shape = y_shape, scale = y_scale)
if(is.null(interv)){
return(data.frame( L[,-1] , A , W , Yw , delta ) )
}else{
return(mean( W*1 - Yw ) )
}
}
d = sim_data(n=2000, tau=20)
plot(d$W , d$Yw )
plot(d$L4, d$Yw, col=ifelse(d$L1==1,'red','black'))
plot(d$L4, d$W, col=ifelse(d$L1==1,'red','black'))
plot(d$L3, d$W, col=ifelse(d$L1==1,'red','black'))
d = sim_data(n=2000, tau=20)
truth = sim_data(1000000,tau=18, interv = 1) - sim_data(1000000,tau=18, interv = 0)
truth
plot(d$W , d$Yw )
plot(d$L4, d$Yw, col=ifelse(d$L1==1,'red','black'))
plot(d$L4, d$W, col=ifelse(d$L1==1,'red','black'))
plot(d$L3, d$W, col=ifelse(d$L1==1,'red','black'))
xt = cbind(1, d$A, d$L1, d$L2, d$L3, d$L4)
xy = cbind(1, d$A, log(d$W), d$L1, d$L2, d$L3, d$L4)
res = cea_mcmc(d, xt = xt, xy = xy, dct = log(d$W), dcy = log(d$Yw), delta = d$delta,
xy_test = xy_test, xt_test = xt_test, t_test = t_test,
tau=18, iter =  2000, burnin = 1000, thin = 1)
d = sim_data(n=300, tau=20)
plot(d$W , d$Yw )
plot(d$L4, d$Yw, col=ifelse(d$L1==1,'red','black'))
plot(d$L4, d$W, col=ifelse(d$L1==1,'red','black'))
plot(d$L3, d$W, col=ifelse(d$L1==1,'red','black'))
xt = cbind(1, d$A, d$L1, d$L2, d$L3, d$L4)
xy = cbind(1, d$A, log(d$W), d$L1, d$L2, d$L3, d$L4)
xy_test = cbind( 1, A = 0,
W = log(seq(.01, 20,  length.out=100)),
L1 = 0,
L2 = 1,
L3=mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
xt_test = cbind( rep(1,100), A = 0,
L1 = 0,
L2 = 1,
L3 = mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
t_test = log(seq(.01, 20,  length.out=100))
res = cea_mcmc(d, xt = xt, xy = xy, dct = log(d$W), dcy = log(d$Yw), delta = d$delta,
xy_test = xy_test, xt_test = xt_test, t_test = t_test,
tau=18, iter =  2000, burnin = 1000, thin = 1)
nmb_post = cea_gcomp(res, cbind(d$L1, d$L2, d$L3, d$L4), 18, 1)
hist(nmb_post[nmb_post<1000 & nmb_post>-1000], breaks=50)
hist(nmb_post, breaks=50)
nmb_post
res
nmb_post = cea_gcomp(res, cbind(d$L1, d$L2, d$L3, d$L4), 18, 1)
plot(d$W, d$Yw,
col=ifelse(d$A==0 & d$L1==0 & d$L2==1, 'red', 'gray'),
pch=20, ylim=c(0, 200), xlim=c(8,20) )
preds = res$cond_mean_y_test
credible_gradient( seq(0, 20,  length.out=100)[-1*c(1:40)],
post_draws = preds[-1*c(1:40),] )
d = sim_data(n=300, tau=20)
truth = sim_data(1000000,tau=18, interv = 1) - sim_data(1000000,tau=18, interv = 0)
truth
plot(d$W , d$Yw )
plot(d$L4, d$Yw, col=ifelse(d$L1==1,'red','black'))
plot(d$L4, d$W, col=ifelse(d$L1==1,'red','black'))
plot(d$L3, d$W, col=ifelse(d$L1==1,'red','black'))
xt = cbind(1, d$A, d$L1, d$L2, d$L3, d$L4)
xy = cbind(1, d$A, log(d$W), d$L1, d$L2, d$L3, d$L4)
xy_test = cbind( 1, A = 0,
W = log(seq(.01, 20,  length.out=100)),
L1 = 0,
L2 = 1,
L3=mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
xt_test = cbind( rep(1,100), A = 0,
L1 = 0,
L2 = 1,
L3 = mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
t_test = log(seq(.01, 20,  length.out=100))
res = cea_mcmc(d, xt = xt, xy = xy, dct = log(d$W), dcy = log(d$Yw), delta = d$delta,
xy_test = xy_test, xt_test = xt_test, t_test = t_test,
tau=18, iter =  2000, burnin = 1000, thin = 1)
nmb_post = cea_gcomp(res, cbind(d$L1, d$L2, d$L3, d$L4), 18, 1)
plot(d$W, d$Yw,
col=ifelse(d$A==0 & d$L1==0 & d$L2==1, 'red', 'gray'),
pch=20, ylim=c(0, 200), xlim=c(8,20) )
preds = res$cond_mean_y_test
credible_gradient( seq(0, 20,  length.out=100)[-1*c(1:40)],
post_draws = preds[-1*c(1:40),] )
points(d$W, d$Yw,
col=ifelse(d$A==0 & d$L1==0 & d$L2==1, 'red', 'gray'),
pch=20, ylim=c(0, 200), xlim=c(5,20) )
hist(nmb_post, breaks=50)
hist(nmb_post[nmb_post<1000 & nmb_post>-1000], breaks=50)
hist(nmb_post[nmb_post<50 & nmb_post>-10], breaks=50)
hist(nmb_post[nmb_post<100 & nmb_post>-10], breaks=50)
abline(v=truth, col='red')
d = sim_data(n=600, tau=20)
xt = cbind(1, d$A, d$L1, d$L2, d$L3, d$L4)
xy = cbind(1, d$A, log(d$W), d$L1, d$L2, d$L3, d$L4)
xy_test = cbind( 1, A = 0,
W = log(seq(.01, 20,  length.out=100)),
L1 = 0,
L2 = 1,
L3=mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
xt_test = cbind( rep(1,100), A = 0,
L1 = 0,
L2 = 1,
L3 = mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
t_test = log(seq(.01, 20,  length.out=100))
res = cea_mcmc(d, xt = xt, xy = xy, dct = log(d$W), dcy = log(d$Yw), delta = d$delta,
xy_test = xy_test, xt_test = xt_test, t_test = t_test,
tau=18, iter =  2000, burnin = 1000, thin = 1)
nmb_post = cea_gcomp(res, cbind(d$L1, d$L2, d$L3, d$L4), 18, 1)
hist(nmb_post[nmb_post<1000 & nmb_post>-1000], breaks=50)
hist(nmb_post[nmb_post<100 & nmb_post>-10], breaks=50)
hist(nmb_post, breaks=50)
abline(v=truth, col='red')
hist(nmb_post[nmb_post<100 & nmb_post>-10], breaks=50)
hist(nmb_post[nmb_post<1000 & nmb_post>-1000], breaks=50)
nmb_post
sim_data = function(n=500, interv=NULL, tau){
L = cbind(1, L1 = rbinom(n, 1, .5), L2=rbinom(n, 1,.5), L3=rnorm(n), L4=rnorm(n))
if(!is.null(interv)){
A = rep(interv, n)
tau = 18
}else{
beta_a = c(0, .1, -1., .1, -.1)
A = rbinom(n, 1, invlogit( L %*% beta_a   )  )
tau = Inf
}
beta_t = c(2.5, .5, -.1, .1, -.1)
time_mu = exp(  L %*% beta_t + .1*A )
time_phi = 2
time = rgamma(n, shape = (time_mu^2)/time_phi, scale = time_phi/time_mu )
rst = pmin(time, tau)
cen_mu = exp(.09 +  L %*% beta_t + .1*A + - 1 * L[,2] * L[,4] + 1*L[,2] * L[,3]  )
cen_phi = 2
cen = rgamma(n, shape = (cen_mu^2)/cen_phi, scale = cen_phi/cen_mu )
if(!is.null(interv)){
cen=Inf
}
W = pmin(rst, cen)
delta = 1*(rst<cen)
#W= pmin(time, cen)
#delta = 1*(time<cen)
beta_y = c(0, .1,-.1, .1, -.1)
y_shape = (W/2)^2
y_scale = exp( -.5*A + L %*% beta_y - .2 * L[,2] * L[,4] +.2*L[,2] * L[,3] )
Yw = rgamma(n, shape = y_shape, scale = y_scale)
if(is.null(interv)){
return(data.frame( L[,-1] , A , W , Yw , delta ) )
}else{
return(mean( W*1 - Yw ) )
}
}
d = sim_data(n=600, tau=20)
truth = sim_data(1000000,tau=18, interv = 1) - sim_data(1000000,tau=18, interv = 0)
xy_test = cbind( 1, A = 0,
W = log(seq(.01, 20,  length.out=100)),
L1 = 0,
L2 = 1,
L3=mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
xt_test = cbind( rep(1,100), A = 0,
L1 = 0,
L2 = 1,
L3 = mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
xt = cbind(1, d$A, d$L1, d$L2, d$L3, d$L4)
xy = cbind(1, d$A, log(d$W), d$L1, d$L2, d$L3, d$L4)
xy_test = cbind( 1, A = 0,
W = log(seq(.01, 20,  length.out=100)),
L1 = 0,
L2 = 1,
L3=mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
xt_test = cbind( rep(1,100), A = 0,
L1 = 0,
L2 = 1,
L3 = mean(d$L3[d$A==0 & d$L1==0 & d$L2==1]),
L4 = mean(d$L4[d$A==0 & d$L1==0 & d$L2==1]) )
t_test = log(seq(.01, 20,  length.out=100))
res = cea_mcmc(d, xt = xt, xy = xy, dct = log(d$W), dcy = log(d$Yw), delta = d$delta,
xy_test = xy_test, xt_test = xt_test, t_test = t_test,
tau=18, iter =  2000, burnin = 1000, thin = 1)
nmb_post = cea_gcomp(res, cbind(d$L1, d$L2, d$L3, d$L4), 18, 1)
hist(nmb_post, breaks=50)
hist(nmb_post[nmb_post<100 & nmb_post>-10], breaks=50)
abline(v=truth, col='red')
hist(rnorm(1000))
hist(exp(rnorm(1000)))
hist(exp(rnorm(1000,1, 5)))
datasets::airmiles
tt = datasets::airmiles
tt = datasets::cars
View(tt)
tt = survival::aml
View(tt)
tt = survival::bladder
View(tt)
?survival::bladder
d = survival::bladder
d_sub = d[,c('id','treatment','recur')]
d = survival::bladder
d_sub = d[,c('id','treatment','recur')]
View(d)
d = survival::bladder1
View(d)
d_sub = d[,c('id','treatment','recur')]
View(d_sub)
View(d_sub)
d_sub = d_sub[d_sub$treatment %in% c('Placebo','pyridoxine')]
d_sub = d_sub[d_sub$treatment %in% c('Placebo','pyridoxine'),]
View(d_sub)
d_sub = d_sub[d_sub$treatment %in% c('placebo','pyridoxine'),]
d_sub = d[,c('id','treatment','recur')]
d_sub = d_sub[d_sub$treatment %in% c('placebo','pyridoxine'),]
View(d_sub)
tapply(d_sub$recur, d_sub$treatment, mean )
glm_res = glm(data=d_sub,
formula = recur ~ treatment,
family=poisson(link = 'log'))
summary(glm_res)
exp(1.26827)
exp(0.26289)
tapply(d_sub$recur, d_sub$treatment, mean )
tapply(d_sub$recur, d_sub$treatment, mean )
d_sub$treatment = ifelse(d_sub$treatment=='placebo',0,1)
d = survival::bladder1
d_sub = d[,c('id','treatment','recur')]
d_sub$treatment = ifelse(d_sub$treatment=='placebo',0,1)
d_sub = d_sub[d_sub$treatment %in% c('placebo','pyridoxine'),]
tapply(d_sub$recur, d_sub$treatment, mean )
View(d_sub)
d = survival::bladder1
d_sub = d[,c('id','treatment','recur')]
View(d_sub)
d_sub = d_sub[d_sub$treatment %in% c('placebo','pyridoxine'),]
d_sub$treatment = ifelse(d_sub$treatment=='placebo',0,1)
View(d_sub)
tapply(d_sub$recur, d_sub$treatment, mean )
4.623529 / 3.554688
glm_res = glm(data=d_sub,
formula = recur ~ treatment,
family=poisson(link = 'log'))
summary(glm_res)
exp(glm_res$coefficients[1])
tapply(d_sub$recur, d_sub$treatment, mean )
exp(exp(glm_res$coefficients[2]))
4.623529 / 3.554688
exp(glm_res$coefficients[2])
d = survival::bladder1
d = survival::bladder1
View(d)
d_sub = d[,c('id','treatment','recur')]
d_sub = d_sub[d_sub$treatment %in% c('placebo','pyridoxine'),]
d_sub$treatment = ifelse(d_sub$treatment=='placebo',0,1)
View(d_sub)
print(d_sub)
tapply(d_sub$recur, d_sub$treatment, mean )
4.623529 / 3.554688
glm_res = glm(data=d_sub,
formula = recur ~ treatment,
family=poisson(link = 'log'))
summary(glm_res)
exp(glm_res$coefficients[1])
exp(glm_res$coefficients[2])
4.623529 / 3.554688
tapply(d_sub$recur, d_sub$treatment, mean )
0.26289/0.06886
2*(1 - pnorm(3.817746, mean=, sd=1))
set.seed(1)
tau = 100
rate= 1/50
foo = function(n){
Y = rexp(n, rate = rate)
Z = ifelse(Y<tau, Y, tau)
R = 1*(Y < tau)
naive = 1/mean( Z[R==1] )
mle_full = sum(R) / ( (n-sum(R))*tau + sum(R)*mean(Z[R==1]) )
return( c('naive' = naive, 'mle_full' = mle_full) )
}
res = replicate( 1000, foo(200) )
par(mfrow=c(2, 1))
hist(1/res[1,], main='naive', breaks=50 ,xlim=c(20, 80))
abline(v=50, col='red', lwd=2)
hist(1/res[2,], main='mle full', breaks=50 , xlim=c(20, 80))
abline(v=50, col='red', lwd=2)
consistsim = function(n){
est = replicate( 1000, foo(n) )
bias_naive = mean((50 - 1/est[1,] ))
bias_mlefull = mean((50 - 1/est[2,] ))
return(c(bias_naive, bias_mlefull))
}
nvec = seq(100, 1000, 50)
ress = sapply(nvec, consistsim)
par(mfrow=c(1,1))
plot(nvec, ress[1, ], type='o', pch=20, ylim=c(-50,50))
lines(nvec, ress[2, ], type='o', pch=20, col='blue')
abline(h=0, col='red', lty=2)
set.seed(1)
foo = function(n){
x = rbinom(n = n,  size = 1, prob = .5)
r = rbinom(n = n, size = 1, prob = .25 + .5*x)
y = rnorm(n = n, mean = 25 + 50*x, 100 )
z = y*r
## target 25*.5 + 75*.5 = 50
res = c('naive' = mean(z[z!=0]),
'HT' = mean( z / (.25 + .5*x)   ) )
return(res)
}
## Part 1
res = t(replicate(1000, foo(n=500), simplify = T))
par(mfrow=c(2,1))
hist(res[,'naive'], breaks=50, xlim=c(30, 80),
main='Naive')
# target = (75*.75*.5 + 25*.25*.5) /(.75*.5 + .25*.5)
abline(v=50, col='red', lwd=2)
abline(v=target, col='green', lwd=2)
hist(res[,'HT'], breaks=50, xlim=c(30, 80),
main='Horvitz-Thompson')
abline(v=50, col='red', lwd=2)
nvals = seq(100, 1000, 100)
res = matrix(NA, nrow = length(nvals), ncol = 2)
for(i in 1:length(nvals) ){
simi = replicate(1000, foo(n=nvals[i]), simplify = T)
bias = rowMeans(simi - 50)
var = apply(simi, 1, var)
res[i ,] = bias^2 + var
}
plot(nvals, res[, 2], type='l', ylim=c(0, 400),
ylab='estimator', xlab='n', col='red')
lines(nvals, res[, 1], col='black')
abline(h=0, lty=2)
set.seed(1)
foo = function(n){
x = rbinom(n = n,  size = 1, prob = .5)
r = rbinom(n = n, size = 1, prob = .25 + .5*x)
y = rnorm(n = n, mean = 25 + 50*x, 10 )
z = y*r
## target 25*.5 + 75*.5 = 50
res = c('naive' = mean(z[z!=0]),
'HT' = mean( z / (.25 + .5*x)   ) )
return(res)
}
## Part 1
res = t(replicate(1000, foo(n=500), simplify = T))
par(mfrow=c(2,1))
hist(res[,'naive'], breaks=50, xlim=c(30, 80),
main='Naive')
# target = (75*.75*.5 + 25*.25*.5) /(.75*.5 + .25*.5)
abline(v=50, col='red', lwd=2)
abline(v=target, col='green', lwd=2)
hist(res[,'HT'], breaks=50, xlim=c(30, 80),
main='Horvitz-Thompson')
abline(v=50, col='red', lwd=2)
nvals = seq(100, 1000, 100)
res = matrix(NA, nrow = length(nvals), ncol = 2)
for(i in 1:length(nvals) ){
simi = replicate(1000, foo(n=nvals[i]), simplify = T)
bias = rowMeans(simi - 50)
var = apply(simi, 1, var)
res[i ,] = bias^2 + var
}
plot(nvals, res[, 2], type='l', ylim=c(0, 400),
ylab='estimator', xlab='n', col='red')
lines(nvals, res[, 1], col='black')
abline(h=0, lty=2)
foo = function(phi){
n=20
sigma_sq = 10
y = rnorm(n, 3, sqrt(sigma_sq) )
mu0 = 0
post_var = 1/ ( (1/phi) + n/sigma_sq )
post_mean = post_var*( mu0/phi + sum(y)/sigma_sq  )
return(c(bayes=post_mean, mle = mean(y)) )
}
calc_sum = function(res){
bias_sq = (mean(res - 3))^2
var_hat = (1/(nsim-1))* sum( (res - mean(res))^2 )
mse = (1/nsim)* sum( (res - 3)^2 )
return(c('bias_sq' = bias_sq, 'var'= var_hat, 'mse' = mse))
}
nsim=10000
phi_vec = seq(1, 10, 1)
nphi = length(phi_vec)
res_bayes = res_mle = matrix(NA, nrow=nphi, ncol=4)
for(i in 1:nphi){
res_bayes[i, 1] = phi_vec[i]
res_mle[i, 1] = phi_vec[i]
res = replicate(nsim, foo( phi_vec[i] ) )
res_bayes[i,-1] = calc_sum( res['bayes',] )
res_mle[i,-1] = calc_sum( res['mle', ] )
}
par(mfrow=c(1,3))
plot(res_bayes[,1], res_bayes[, 4], col='blue',
pch=20, type='o', main = 'MSE')
lines(res_mle[,1], res_mle[,4], pch=20, type='o', col='black' )
plot(res_bayes[,1], res_bayes[, 2], type='o', col='blue',
pch=20, main = 'bias^2')
lines(res_mle[,1], res_mle[,2], pch=20, type='o', col='black' )
plot(res_bayes[,1], res_bayes[, 3],
main = 'variance',
pch=20, type='o', col='blue', ylim=c(0, .8))
lines(res_mle[,1], res_mle[,3], col='black', pch=20, type='o' )
setwd("google_drive/Software/personal_site/")
blogdown::build_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
