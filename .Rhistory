B = 1000
bootstrap_iter = function(x, y, n){
idx = sample(x = 1:n, size = n, replace = T )
x_b = x[idx]
y_b = y[idx]
cor(x_b, y_b)
}
bootstrap_dist = replicate(n = B, expr = bootstrap_iter(x,y,n) )
bootstrap_dist
hist(bootstrap_dist, breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
mean(bootstrap_dist)
sd(bootstrap_dist)
#----------------------------------------------------------#
### ------------ Bootstrap - R Package      ---------- #####
#----------------------------------------------------------#
library(boot)
pearson = function(data, idx ){
cor( data[idx, 1], data[idx,2] )
}
?boot
bootstrap_dist_pack = boot(data = cbind(x, y),
statistic = pearson,
R = B)
hist(bootstrap_dist_pack$t,
breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
set.seed(130)
n=1000
## generate data from Gamma.
x = rgamma(n = n, shape = 10, scale = 10)
sample_mean = function(data, idx ){ mean( data[idx] ) }
boot_smean = boot(data = x, statistic = sample_mean, R = 5000)
hist(boot_smean$t,
breaks = 50, xlim=c(90, 110),
main = 'Bootstrap distribution of sample mean',
xlab = 'xbar', freq=F)
## by CLT, xbar ~ N( shape*scale, (shape*scale^2) / n  )
curve(dnorm(x, mean = 100, sd=sqrt(10*(10^2)/n) ), col='red', add=T)
y = rgamma(300, shape=10, rate=7)
y
## plot simulated data
hist(y, freq=F, breaks=100)
beta_hat = mean(y)/( (mean(y^2)) - mean(y)^2)
alpha_hat = mean(y)*beta_hat
curve(dgamma(x, shape = alpha_hat, rate = beta_hat),
col='red', add=T)
alpha_hat
beta_hat
100*.002
qnorm(.995)
(10*(100.4/100 - 1))/.05
1-pnorm(.8)
n = 100
B = 1000
runif(n, 0, 1)
runif(n, 0, 1)
runif(n, 0, 1)
runif(n, 0, 1)
data = replicate(n = B, runif(n, 0, 1))
dim(data)
View(data)
min(data[, 1])
min(data[, 2])
min(data[, 3])
all_mins = apply(data, 2, min)
epsilon = .001
prop_less_epsilon = mean(all_mins < epsilon)
prop_less_epsilon
all_mins < epsilon
mean(all_mins < epsilon)
n = 1000
L = rbinom(n = n, size = 1, prob = .5)
A = rbinom(n = n, size = 1, prob = .25 + .5*L)
Y = rbinom(n = n, size = 1, prob = .25 + .5*A - .25*L)
d = data.frame(Y=Y, A=A, L=L)
View(d)
lm( Y ~ A + L)
summary(lm( Y ~ A + L))
n = 1000
L = rbinom(n = n, size = 1, prob = .5)
A = rbinom(n = n, size = 1, prob = .25 + .5*L)
Y = rbinom(n = n, size = 1, prob = .25 + .5*A - .25*L)
d = data.frame(Y=Y, A=A, L=L)
summary(lm( Y ~ A + L))
summary(lm( Y ~ A))
3/8
n = 10000
L = rbinom(n = n, size = 1, prob = .5)
A = rbinom(n = n, size = 1, prob = .25 + .5*L)
Y = rbinom(n = n, size = 1, prob = .25 + .5*A - .25*L)
d = data.frame(Y=Y, A=A, L=L)
summary(lm( Y ~ A + L))
summary(lm( Y ~ A))
n = 100000
L = rbinom(n = n, size = 1, prob = .5)
A = rbinom(n = n, size = 1, prob = .25 + .5*L)
Y = rbinom(n = n, size = 1, prob = .25 + .5*A - .25*L)
d = data.frame(Y=Y, A=A, L=L)
summary(lm( Y ~ A + L))
summary(lm( Y ~ A))
3/8
devtools::install_github("RuBBiT-hj/causalBETA")
library(casualBETA)
casualBETA
library(casualBETA)
library('casualBETA')
devtools::install_github("RuBBiT-hj/causalBETA")
library(casualBETA)
library(casualBETA)
devtools::install_github("RuBBiT-hj/causalBETA")
devtools::install_github("RuBBiT-hj/causalBETA", force = T)
library(casualBETA)
??causalBETA
?causalBETA
??causalBETA
devtools::install_github("RuBBiT-hj/causalBETA", force = T)
library(casualBETA)
devtools::install_github("stablemarkets/BayesSurvival")
library(casualBETA)
library(causalBETA)
devtools::install_github("RuBBiT-hj/causalBETA")
library(casualBETA)
?bayesgcomp
library(causalBETA)
?bayesgcomp
devtools::install_github("stablemarkets/BayesSurvival")
library(causalBETA)
?bayeshaz
?bayesgcomp
devtools::install_github("RuBBiT-hj/causalBETA")
?bayeshaz
library(causalBETA)
?bayesgcomp
?bayeshaz
library(causalBETA)
?bayeshaz
?bayesgcomp
x = rbeta(n = 1000, 1, 1)
hist(x)
x = rbeta(n = 100000, 1, 1)
hist(x)
x = rbeta(n = 100000, 1/2, 1/2)
hist( x )
hist( x/(1-x) )
hist( x/(1-x) )
x = rbeta(n = 100000, 1/2, 1/2)
hist( x/(1-x) )
x = rbeta(n = 100000, 1, 1)
hist( x/(1-x) )
x = rbeta(n = 100000, 2, 2)
hist( x/(1-x) )
hist( log(x/(1-x) ) )
x = rbeta(n = 100000, 1, 1)
hist( log(x/(1-x) ) )
hist( log(x/(1-x) ), breaks=100 )
x = rbeta(n = 100000, 1/2, 1/2)
hist( log(x/(1-x) ), breaks=100 )
hist( x/(1-x ), breaks=100 )
hist( x, breaks=100 )
x = rbeta(n = 100000, 0, 0)
hist( log(x/(1-x) ), breaks=100 )
x = rbeta(n = 100000, 1, 1)
hist( log(x/(1-x) ), breaks=100 )
y = rpois(n = 100, lambda = 10)
hist(y)
set.seed(1)
y = rpois(n = 100, lambda = 10)
hist(y)
### ---- bootstrap ---- ###
foo = function(){
y = rpois(n = 100, lambda = 10)
return(1 - exp(-mean(y)))
}
### ---- bootstrap ---- ###
foo = function(){
y = rpois(n = 100, lambda = 10)
muhat = 1 - exp(-mean(y))
test_stat = (muhat - 10)/(sqrt(exp(-mean(y))*mean(y)))
return(test_stat )
}
res = replicate(1000, foo())
hist(res)
### ---- bootstrap ---- ###
foo = function(){
y = rpois(n = 100, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/(sqrt(exp(-mean(y))*mean(y)))
return(test_stat )
}
res = replicate(1000, foo())
hist(res)
curve(dnorm(x), col='red')
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
### ---- bootstrap ---- ###
foo = function(){
y = rpois(n = 100, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
set.seed(1)
y = rpois(n = 1000, lambda = 10)
hist(y)
### ---- bootstrap ---- ###
foo = function(){
y = rpois(n = 100, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
set.seed(1)
y = rpois(n = 1000, lambda = 10)
hist(y)
### ---- bootstrap ---- ###
foo = function(){
y = rpois(n = 100, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
y = rpois(n = 1000, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
y = rpois(n = 1000, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
y = rpois(n = 1000, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
y = rpois(n = 1000, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
y = rpois(n = 1000, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
y = rpois(n = 1000, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (muhat - mu)/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
### ---- simulate  ---- ###
foo = function(){
n= 300
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
### ---- simulate  ---- ###
foo = function(){
n= 1000
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(1000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
### ---- simulate  ---- ###
foo = function(){
n= 1000
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(10000, foo())
res
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
### ---- simulate  ---- ###
foo = function(){
n= 30
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(10000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
foo = function(){
n= 1000
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(10000, foo())
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
y = rpois(n = 100, lambda = 10)
hist(y)
?curve
hist(res, freq=F)
curve(dnorm(x), col='red', add=T)
hist(res, freq=F, xlim=c(-4,4))
curve(dnorm(x), col='red', add=T)
foo = function(){
n= 30
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(10000, foo())
hist(res, freq=F, xlim=c(-4,4))
curve(dnorm(x), col='red', add=T)
foo = function(){
n= 20
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(10000, foo())
hist(res, freq=F, xlim=c(-4,4))
curve(dnorm(x), col='red', add=T)
foo = function(){
n= 1000
y = rpois(n = n, lambda = 10)
muhat = 1 - exp(-mean(y))
mu = 1 - exp(-10)
test_stat = (sqrt(n)*(muhat - mu))/sqrt(exp(-2*mean(y))*mean(y))
return(test_stat )
}
res = replicate(10000, foo())
hist(res, freq=F, xlim=c(-4,4))
curve(dnorm(x), col='red', add=T)
x = rnorm(1000, 100, 20)
hist(x)
hist(x - 100)
hist( (x - 100)/ 20 )
2*(1-pnorm(-8.48))
2*(1-pnorm(-8.48))
2*(1-pnorm(8.48))
(1-pnorm(8.48)) + pnorm(-8.48)
# two tailed test (asymmetrical)
# using chisq dist
library(ggplot2)
# set the significance level
alpha <- 0.05
# degrees of freedom
df <- 5
# median of the chi-sq dist
median_chi_sq <- qchisq(0.5, df)
# observed value t from our sample
#t_observed <- 12.8301 # high end (when df=5)
#t_observed <- .8313 # low end (when df=5)
#t_observed <- 4.3 # near median (when df=5)
t_observed <- 12
# calculate the p-value for the side of the distribution where t_obs lies
if (t_observed < median_chi_sq) {
p_value_one_tail <- pchisq(t_observed, df, lower.tail = TRUE)
equivalent_value <- qchisq(1 - p_value_one_tail, df, lower.tail = TRUE)
p_value_other_tail <- 1 - pchisq(equivalent_value, df, lower.tail = TRUE)
} else {
p_value_one_tail <- pchisq(t_observed, df, lower.tail = FALSE)
equivalent_value <- qchisq(p_value_one_tail, df, lower.tail = FALSE)
p_value_other_tail <- pchisq(equivalent_value, df, lower.tail = FALSE)
}
# two-tailed p-value is the sum of the two tails' p-values
p_value <- p_value_one_tail + p_value_other_tail
# print the p-values
print(paste("One-tail p-value:", p_value_one_tail))
print(paste("Other-tail p-value:", p_value_other_tail))
print(paste("Two-sided p-value:", p_value))
# generate a sequence of values for the chi-squared distribution
x_values <- seq(0, 20, length.out = 1000)
pdf_values <- dchisq(x_values, df = df)
# create a data frame for plotting
plot_data <- data.frame(x_values, pdf_values)
# calculate the critical values for alpha/2 and 1-alpha/2
critical_value_lower <- qchisq(alpha / 2, df = df)
critical_value_upper <- qchisq(1 - alpha / 2, df = df)
# plot highlight the rejection regions
p <- ggplot(plot_data, aes(x = x_values, y = pdf_values)) +
geom_line() +
geom_area(data = subset(plot_data, x_values <= critical_value_lower),
aes(x = x_values, y = pdf_values), fill = "red", alpha = 0.3) +
geom_area(data = subset(plot_data, x_values >= critical_value_upper),
aes(x = x_values, y = pdf_values), fill = "red", alpha = 0.3) +
labs(title = "Chi-Squared Distribution with Rejection Regions",
x = "Value", y = "Density") +
geom_vline(xintercept = critical_value_lower, linetype = "dashed", color = "blue") +
geom_vline(xintercept = critical_value_upper, linetype = "dashed", color = "blue") +
geom_vline(xintercept = t_observed, linetype = "solid", color = "green") +
annotate("text", x = critical_value_lower, y = max(pdf_values), label = "Lower critical", vjust = 1.5, hjust = 0) +
annotate("text", x = critical_value_upper, y = max(pdf_values), label = "Upper critical", vjust = 1.5, hjust = 1)
# display the plot
print(p)
p_value_one_tail <- pchisq(t_observed, df, lower.tail = TRUE)
p_value_one_tail
equivalent_value <- qchisq(1 - p_value_one_tail, df, lower.tail = TRUE)
equivalent_value
t_observed
?qchisq
1 - p_value_one_tail
p_value_one_tail
p_value_one_tail <- pchisq(t_observed, df, lower.tail = FALSE)
p_value_one_tail
p_value_one_tail
qchisq(p_value_one_tail, df, lower.tail = FALSE)
p_value_one_tail <- pchisq(t_observed, df, lower.tail = FALSE)
equivalent_value <- qchisq(p_value_one_tail, df, lower.tail = FALSE)
p_value_other_tail <- pchisq(equivalent_value, df, lower.tail = FALSE)
p_value_one_tail
equivalent_value
p_value_other_tail
p_value_one_tail
p_value_other_tail
p_value_one_tail
qchisq(p_value_one_tail, df, lower.tail = T)
equivalent_value <- qchisq(p_value_one_tail, df, lower.tail = T)
p_value_other_tail <- pchisq(equivalent_value, df, lower.tail = FALSE)
p_value_other_tail
p_value_other_tail <- pchisq(equivalent_value, df, lower.tail = T)
p_value_other_tail
p_value_one_tail
x = rbeta(10000, 2,2)
hist(x)
x = rbeta(10000, 1,1)
hist(x)
hist(x/(1-x))
x = rbeta(10000, 2,2)
hist(x/(1-x))
x = rbeta(10000, 20,20)
hist(x/(1-x))
x = rbeta(10000, 5,5)
hist(x/(1-x))
mean((x/(1-x))>1)
x = rbeta(10000, 1,1)
hist(x/(1-x))
hist(x/(1-x), xlim = c(0, 10))
hist(x/(1-x), xlim = c(0, 10), breaks=1000)
hist(x/(1-x), xlim = c(0, 10), breaks=100000)
abline(v=1)
abline(v=1, col='red')
setwd("~/google_drive/Software/personal_site/")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
