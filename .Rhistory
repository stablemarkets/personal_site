image(xi0_vals, xi1_vals, diffmat, col = colgen(100), axes = TRUE)
abline(0,-1,col='black', lwd=2)
diffmat = matrix(NA, ncol=length(xi0_vals), nrow = length(xi1_vals))
for(i in 1:length(xi0_vals)){
for(j in 1:length(xi1_vals)){
diffmat[j,i] = foo(xi0_vals[i], xi1_vals[j] )
}
}
diffmat = abs(diffmat/truth)
image(xi0_vals, xi1_vals, diffmat, col = colgen(100), axes = TRUE)
abline(0,-1,col='black', lwd=2)
exp(-3)
exp(-10)
exp(-5)
exp(-10)
exp(10)
250000*33
250000*.33
250000 - 82500
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
#### ----- simulate data from TWFE model ------ ####
bigT = 100
g = 50
n = 100
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
y = rnorm(bigT, theta_t + eta_a + beta*c(rep(0,50), rep(1,50), 1 )
y = rnorm(bigT, theta_t + eta_a + beta*c(rep(0,50), rep(1,50)), 1)
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
eta_a = 2
beta = 5
y = rnorm(bigT, theta_t + eta_a + beta*c(rep(0,50), rep(1,50)), 1)
plot(y)
y = replicate(n, rnorm(bigT, theta_t + eta_a + beta*c(rep(0,50), rep(1,50)), 1))
#### ----- simulate data from TWFE model ------ ####
bigT = 50
g = 50
n = 100
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
eta_a = 2
beta = 5
y = replicate(n, rnorm(bigT, theta_t + eta_a + beta*c(rep(0,25), rep(1,25)), 1))
plot(y)
View(y)
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,25), rep(1,25)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
theta_t = rnorm(bigT,10,1)
eta_1 = 2
eta_0 = 2
beta = 5
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,25), rep(1,25)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1])
#### ----- simulate data from TWFE model ------ ####
bigT = 50
g = 50
n = 100
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
eta_1 = 2
eta_0 = 2
beta = 10
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,25), rep(1,25)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1])
plot(y0[,1])
bigT = 50 ## number of time points
g = 25 ## policy implementation time
n = 100 ## number of subjects
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
eta_1 = 2
eta_0 = 2
beta = 10
## matrix n X bigT of data for treatment (y1) and untreated (y0)
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,g), rep(1,g)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1])
plot(y1[,1], type='l')
for(i in 2:n){
lines(y1[,i])
}
plot(y1[,1], type='l', ylim=c(0,100))
plot(y1[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y1[,i])
}
plot(y0[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y0[,i])
}
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,g), rep(1,g)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y1[,i])
}
lines(y0[,1], type='l', ylim=c(0,50), col='gray')
for(i in 2:n){
lines(y0[,i], col='gray')
}
library(dplyr)
library(tidyr)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
# Add row numbers as a new column
df$row <- 1:nrow(df)
# Convert the data frame to long format
long_df <- df %>%
pivot_longer(cols = -row, names_to = "col", values_to = "value") %>%
select(row, value)
50*101
50*100
View(df)
ncol(df)
View(df)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
# Add row numbers as a new column
df$row <- 1:nrow(df)
# Convert the data frame to long format
long_df <- df %>%
pivot_longer(cols = -row, names_to = "col", values_to = "value") %>%
select(row, value)
# Convert the data frame to long format
y1_long <- df %>%
pivot_longer(cols = -row, names_to = "col", values_to = "value") %>%
select(row, value)
View(y1_long)
max(y1_long$row)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
# Add row numbers as a new column
df$time <- 1:nrow(df)
# Convert the data frame to long format with subject and time IDs
long_df <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = as.integer(gsub("V", "", subject))) %>%
arrange(subject, time)
View(long_df)
df <- as.data.frame(y1)
df$time <- 1:nrow(df)
long_y1 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = as.integer(gsub("V", "", subject)), A=1) %>%
arrange(subject, time)
df <- as.data.frame(y0)
df$time <- 1:nrow(df)
long_y0 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = 100+as.integer(gsub("V", "", subject)), A=0) %>%
arrange(subject, time)
df_all = rbind(long_y1, long_y0)
View(df_all)
df_all$int = df_all$A*(df_all$time>=g)
lm(data = df_alla, value ~ as.factor(time) + A + int )
lm(data = df_all, value ~ as.factor(time) + A + int )
lm(data = df_all, value ~ -1 + as.factor(time) + A + int )
#### --------- simulate data from TWFE model ----------- ####
bigT = 50 ## number of time points
g = 25 ## policy implementation time
n = 100 ## number of subjects
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
theta_t = rep(bigT, 7)
eta_1 = 2
eta_0 = 2
beta = 10
## matrix n X bigT of data for treatment (y1) and untreated (y0)
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,g), rep(1,g)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y1[,i])
}
lines(y0[,1], type='l', ylim=c(0,50), col='gray')
for(i in 2:n){
lines(y0[,i], col='gray')
}
#### --------- Run TWFE model ----------- ####
library(dplyr)
library(tidyr)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
df$time <- 1:nrow(df)
long_y1 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = as.integer(gsub("V", "", subject)), A=1) %>%
arrange(subject, time)
df <- as.data.frame(y0)
df$time <- 1:nrow(df)
long_y0 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = 100+as.integer(gsub("V", "", subject)), A=0) %>%
arrange(subject, time)
df_all = rbind(long_y1, long_y0)
df_all$int = df_all$A*(df_all$time>=g)
lm(data = df_all, value ~ -1 + as.factor(time) + A + int )
#### --------- simulate data from TWFE model ----------- ####
bigT = 50 ## number of time points
g = 25 ## policy implementation time
n = 100 ## number of subjects
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
theta_t = rep(bigT, 10)
eta_1 = 2
eta_0 = 2
beta = 10
## matrix n X bigT of data for treatment (y1) and untreated (y0)
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,g), rep(1,g)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y1[,i])
}
lines(y0[,1], type='l', ylim=c(0,50), col='gray')
for(i in 2:n){
lines(y0[,i], col='gray')
}
#### --------- Run TWFE model ----------- ####
library(dplyr)
library(tidyr)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
df$time <- 1:nrow(df)
long_y1 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = as.integer(gsub("V", "", subject)), A=1) %>%
arrange(subject, time)
df <- as.data.frame(y0)
df$time <- 1:nrow(df)
long_y0 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = 100+as.integer(gsub("V", "", subject)), A=0) %>%
arrange(subject, time)
df_all = rbind(long_y1, long_y0)
df_all$int = df_all$A*(df_all$time>=g)
lm(data = df_all, value ~ -1 + as.factor(time) + A + int )
theta_t
#### --------- simulate data from TWFE model ----------- ####
bigT = 50 ## number of time points
g = 25 ## policy implementation time
n = 100 ## number of subjects
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
theta_t = rep(10, bigT)
eta_1 = 2
eta_0 = 2
beta = 10
## matrix n X bigT of data for treatment (y1) and untreated (y0)
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,g), rep(1,g)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y1[,i])
}
lines(y0[,1], type='l', ylim=c(0,50), col='gray')
for(i in 2:n){
lines(y0[,i], col='gray')
}
#### --------- Run TWFE model ----------- ####
library(dplyr)
library(tidyr)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
df$time <- 1:nrow(df)
long_y1 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = as.integer(gsub("V", "", subject)), A=1) %>%
arrange(subject, time)
df <- as.data.frame(y0)
df$time <- 1:nrow(df)
long_y0 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = 100+as.integer(gsub("V", "", subject)), A=0) %>%
arrange(subject, time)
df_all = rbind(long_y1, long_y0)
df_all$int = df_all$A*(df_all$time>=g)
lm(data = df_all, value ~ -1 + as.factor(time) + A + int )
#### --------- simulate data from TWFE model ----------- ####
bigT = 50 ## number of time points
g = 25 ## policy implementation time
n = 1000 ## number of subjects
## E[Y(t) | A=a ] = theta_t + eta_a + beta I( t>=g, a=1)
theta_t = rnorm(bigT,10,1)
theta_t = rep(10, bigT)
eta_1 = 2
eta_0 = 2
beta = 10
## matrix n X bigT of data for treatment (y1) and untreated (y0)
y1 = replicate(n, rnorm(bigT, theta_t + eta_1 + beta*c(rep(0,g), rep(1,g)), 1))
y0 = replicate(n, rnorm(bigT, theta_t + eta_0 + beta*c(rep(0,50)), 1))
plot(y1[,1], type='l', ylim=c(0,50))
for(i in 2:n){
lines(y1[,i])
}
lines(y0[,1], type='l', ylim=c(0,50), col='gray')
for(i in 2:n){
lines(y0[,i], col='gray')
}
#### --------- Run TWFE model ----------- ####
library(dplyr)
library(tidyr)
# Convert the matrix to a data frame
df <- as.data.frame(y1)
df$time <- 1:nrow(df)
long_y1 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = as.integer(gsub("V", "", subject)), A=1) %>%
arrange(subject, time)
df <- as.data.frame(y0)
df$time <- 1:nrow(df)
long_y0 <- df %>%
pivot_longer(cols = -time, names_to = "subject", values_to = "value") %>%
mutate(subject = 100+as.integer(gsub("V", "", subject)), A=0) %>%
arrange(subject, time)
df_all = rbind(long_y1, long_y0)
df_all$int = df_all$A*(df_all$time>=g)
lm(data = df_all, value ~ -1 + as.factor(time) + A + int )
#### --------- Estimate Xi ----------- ####
rowMeans(y1) - rowMeans(y0)
#### --------- Estimate Xi ----------- ####
xi_hat = rowMeans(y1[1:g]) - rowMeans(y0[1:g])
#### --------- Estimate Xi ----------- ####
xi_hat = rowMeans(y1[2:g] - y1[1:(g-1)]) - rowMeans(y0[2:g] - y0[1:(g-1)])
y1[1:(g-1)]
y1[2:g]
#### --------- Estimate Xi ----------- ####
xi_hat = rowMeans(y1[2:g, ] - y1[1:(g-1), ]) - rowMeans(y0[2:g, ] - y0[1:(g-1),])
hist(xi_hat)
hist(xi_hat, breaks=50)
sum(xi_hat)
rowMeans(y1[2:g, ] - y1[1:(g-1), ]) - rowMeans(y0[2:g, ] - y0[1:(g-1),])
plot(xi_hat)
#### --------- Estimate Xi ----------- ####
xi_hat = rowMeans(y1[2:g, ] - y1[1:(g-1), ] - y0[2:g, ] - y0[1:(g-1),])
hist(xi_hat, breaks=50)
sum(xi_hat)
plot(xi_hat)
#### --------- Estimate Xi ----------- ####
xi_hat = rowMeans( (y1[2:g, ] - y1[1:(g-1), ]) - (y0[2:g, ] - y0[1:(g-1),]) )
hist(xi_hat, breaks=50)
sum(xi_hat)
plot(xi_hat)
#### --------- Estimate Xi ----------- ####
xi_hat = rowMeans( (y1[2:g, ] - y1[1:(g-1), ])) - rowMeans(y0[2:g, ] - y0[1:(g-1),] )
plot(xi_hat)
sum(xi_hat)
library(tidyverse)
library(broom)
set.seed(032323)
# no confounding
n <- 10000
a <- rbinom(n, 1, 0.5)
Y_0 <- rbinom(n, 1, 0.1 + 0.5*0 )
Y_1 <- rbinom(n, 1, 0.1 + 0.5*1 )
Y  <-  Y_0*(1-a) + Y_1*a
df1 <- data.frame(a, Y_0, Y_1, Y)
## causal risk difference is 0.5, which is the intercept in this model
m11 <- glm(Y_1 ~ a, data=df1, family=gaussian(link="identity"))
tidy(m11)
## intercept is 0.1 which is the mean of Y_0 in this model.
m10 <- glm(Y_0 ~ a, data=df1, family=gaussian(link="identity"))
tidy(m10)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
m10 <- glm(Y_0[a==0] ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
#### Next, create two copies of each person, one with a=1 and Y_1 value and the other with a=0 and their Y_0 value
df2 <- data.frame(a,  Y, Y_0, Y_1)  %>%
mutate(a_star=1, Y_star=Y_1)
df3 <- data.frame(a,Y, Y_0, Y_1)  %>%
mutate(a_star=0, Y_star=Y_0)
df4 <- rbind(df2,df3)
## here, the intercept is equal to Pr[Y^0=1] = 0.1 and alpha_1 is the causal risk difference, Pr[Y^1=1] - Pr[Y^0=1] = 0.5
m21 <- glm(Y_star ~ a_star, data=df4, family=gaussian(link="identity"))
tidy(m21)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
m11 <- glm(Y_1 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m11)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
tidy(m21)
##--- Approach 1:
mean(Y_1) - mean(Y_0)
library(tidyverse)
library(broom)
set.seed(032323)
# no confounding
n <- 10000
a <- rbinom(n, 1, 0.5)
Y_0 <- rbinom(n, 1, 0.1 + 0.5*0 )
Y_1 <- rbinom(n, 1, 0.1 + 0.5*1 )
Y  <-  Y_0*(1-a) + Y_1*a
##--- Approach 1:
mean(Y_1) - mean(Y_0)
##--- Approach 1: difference sample averages
mean(Y_1 - Y_0)
##--- Approach 1: difference sample averages
mean(Y_1) - mean(Y_0)
df1 <- data.frame(a, Y_0, Y_1, Y)
m11 <- glm(Y_1 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m11)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
m11$coefficients
m11$coefficients - m10$coefficients
glm(Y_1 ~ A, data=df1, family=gaussian(link="identity"))
glm(Y_1 ~ a, data=df1, family=gaussian(link="identity"))
m21
sum(coefficients(m21))
0.58693   +   0.01636
.5*( .5 ) + .5*.5
#### Next, create two copies of each person, one with a=1 and Y_1 value and the other with a=0 and their Y_0 value
df2 <- data.frame(a,  Y, Y_0, Y_1)  %>%
mutate(a_star=1, Y_star=Y_1)
df3 <- data.frame(a,Y, Y_0, Y_1)  %>%
mutate(a_star=0, Y_star=Y_0)
df4 <- rbind(df2,df3)
## here, the intercept is equal to Pr[Y^0=1] = 0.1 and alpha_1 is the causal risk difference, Pr[Y^1=1] - Pr[Y^0=1] = 0.5
m21 <- glm(Y_star ~ a_star, data=df4, family=gaussian(link="identity"))
tidy(m21)
hat_alpha1_method_2
hat_alpha1_method_2 = m11$coefficients - m10$coefficients
hat_alpha1_method_2
hat_alpha1_method_1
##--- Method 1: difference sample averages
hat_alpha1_method_1 = mean(Y_1) - mean(Y_0)
hat_alpha1_method_1
library(tidyverse)
library(broom)
set.seed(032323)
# no confounding
n <- 10000
a <- rbinom(n, 1, 0.5)
Y_0 <- rbinom(n, 1, 0.1 + 0.5*0 )
Y_1 <- rbinom(n, 1, 0.1 + 0.5*1 )
Y  <-  Y_0*(1-a) + Y_1*a
##--- Method 1: difference sample averages
hat_alpha1_method_1 = mean(Y_1) - mean(Y_0)
##--- Method 2: difference in regression intercepts
df1 <- data.frame(a, Y_0, Y_1, Y)
m11 <- glm(Y_1 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m11)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
hat_alpha1_method_2 = m11$coefficients - m10$coefficients
#### Next, create two copies of each person, one with a=1 and Y_1 value and the other with a=0 and their Y_0 value
df2 <- data.frame(a,  Y, Y_0, Y_1)  %>%
mutate(a_star=1, Y_star=Y_1)
df3 <- data.frame(a,Y, Y_0, Y_1)  %>%
mutate(a_star=0, Y_star=Y_0)
df4 <- rbind(df2,df3)
## here, the intercept is equal to Pr[Y^0=1] = 0.1 and alpha_1 is the causal risk difference, Pr[Y^1=1] - Pr[Y^0=1] = 0.5
m21 <- glm(Y_star ~ a_star, data=df4, family=gaussian(link="identity"))
tidy(m21)
hat_alpha1_method_2
m21
#### Next, create two copies of each person, one with a=1 and Y_1 value and the other with a=0 and their Y_0 value
df2 <- data.frame(a,  Y, Y_0, Y_1)  %>%
mutate(a_star=1, Y_star=Y_1)
df3 <- data.frame(a,Y, Y_0, Y_1)  %>%
mutate(a_star=0, Y_star=Y_0)
df4 <- rbind(df2,df3)
## here, the intercept is equal to Pr[Y^0=1] = 0.1 and alpha_1 is the causal risk difference, Pr[Y^1=1] - Pr[Y^0=1] = 0.5
m21 <- glm(Y_star ~ a_star, data=df4, family=gaussian(link="identity"))
tidy(m21)
m21
tidy(m21)
hat_alpha1_method_3 = m21$coefficients[2]
hat_alpha1_method_3
library(tidyverse)
library(broom)
set.seed(032323)
# no confounding
n <- 10000
a <- rbinom(n, 1, 0.5)
Y_0 <- rbinom(n, 1, 0.1 + 0.5*0 )
Y_1 <- rbinom(n, 1, 0.1 + 0.5*1 )
Y  <-  Y_0*(1-a) + Y_1*a
##--- Method 1: difference sample averages
hat_alpha1_method_1 = mean(Y_1) - mean(Y_0)
##--- Method 2: difference in regression intercepts
df1 <- data.frame(a, Y_0, Y_1, Y)
m11 <- glm(Y_1 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m11)
m10 <- glm(Y_0 ~ 1, data=df1, family=gaussian(link="identity"))
tidy(m10)
hat_alpha1_method_2 = m11$coefficients - m10$coefficients
##--- Method 3: difference in regression intercepts
#### Next, create two copies of each person, one with a=1 and Y_1 value and the other with a=0 and their Y_0 value
df2 <- data.frame(a,  Y, Y_0, Y_1)  %>%
mutate(a_star=1, Y_star=Y_1)
df3 <- data.frame(a,Y, Y_0, Y_1)  %>%
mutate(a_star=0, Y_star=Y_0)
df4 <- rbind(df2,df3)
## here, the intercept is equal to Pr[Y^0=1] = 0.1 and alpha_1 is the causal risk difference, Pr[Y^1=1] - Pr[Y^0=1] = 0.5
m21 <- glm(Y_star ~ a_star, data=df4, family=gaussian(link="identity"))
hat_alpha1_method_3 = m21$coefficients[2]
##--- Compare methods
hat_alpha1_method_1
hat_alpha1_method_2
hat_alpha1_method_3
blogdown::build_site("~/google_drive/Software/personal_site/")
setwd("~/google_drive/Software/personal_site/")
blogdown::build_site()
