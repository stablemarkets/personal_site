integrate(marginal_density, lower = -1, upper = Inf)
foo = function(x) 1*(x<0.0001)
integrate(marginal_density, lower = -1, upper = Inf)
foo = function(x) 1*(x<0.0001)
integrate(foo, lower = -1, upper = Inf)
foo = function(x) 1*(x<0.0000001)
integrate(foo, lower = -1, upper = Inf)
foo = function(x) 1*(x<0.0000000001)
integrate(foo, lower = -1, upper = Inf)
foo = function(x) 1*(x<0.0000000000001)
integrate(foo, lower = -1, upper = Inf)
tol = 1e-20
marginal_density = function(x){
tol = 1e-20
1*(x<tol)*.5 + .5*dgamma(x, 5, 1)
}
integrate(marginal_density, lower = -1, upper = Inf)
integrate(marginal_density, lower = 0, upper = Inf)
integrate(marginal_density, lower = -Inf, upper = Inf)
integrate(marginal_density, lower = -1, upper = Inf)
integrate(marginal_density, lower = 0, upper = Inf)
marginal_density = function(x){
tol = 1e-10
1*(x<tol)*.5 + .5*dgamma(x, 5, 1)
}
integrate(marginal_density, lower = 0, upper = Inf)
1e-10
marginal_density = function(x){
tol = 1e-10
.5*( x < tol) + .5*dgamma(x, 5, 1)
}
integrate(marginal_density, lower = 0, upper = Inf)
foo = function(x) tol = 1e-10; .5*( x < tol);
foo = function(x){} tol = 1e-10; .5*( x < tol); }
foo = function(x){} tol = 1e-10; .5*( x < tol); }
foo = function(x){ tol = 1e-10; .5*( x < tol); }
integrate(foo, lower = -1, upper = Inf)
foo = function(x){ tol = 1e-10; 1*( x < tol); }
integrate(foo, lower = -1, upper = Inf)
foo = function(x){ tol = 1e-10; .5*( x < tol); }
integrate(foo, lower = -1, upper = Inf)
foo2 = function(x){ dgamma(x, 5, 1) }
integrate(foo2, lower = -1, upper = Inf)
foo = function(x){ tol = 1e-10; .5*( x < tol); }
foo2 = function(x){ dgamma(x, 5, 1) }
integrate(foo, lower = 0, upper = Inf)
foo = function(x){ tol = 1e-10; .5*( x < tol); }
foo2 = function(x){ dgamma(x, 5, 1) }
integrate(foo, lower = 0, upper = Inf)
foo = function(x){ tol = .0001; .5*( x < tol); }
integrate(foo, lower = 0, upper = Inf)
?integrate
integrate(foo, lower = -1, upper = Inf)
integrate(marginal_density, lower = -100, upper = 100)
marginal_density = function(x){
tol = 1e-10
.5*( x < tol) + .5*dgamma(x, 5, 1)
}
integrate(marginal_density, lower = -100, upper = 100)
integrate(marginal_density, lower = -1000, upper = 1000)
integrate(marginal_density, lower = 0, upper = 1000)
integrate(marginal_density, lower = -1, upper = 1000)
integrate(marginal_density, lower = -1, upper = Inf)
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
.5*( x < tol) + .5*dgamma(x, 5, 1)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Zero-Inflated Gamma Density'))
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
.5*( x == 0) + .5*dgamma(x, 5, 1)*(x!=0)
}
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
.5*( x == 0) + .5*dgamma(x, 5, 1)*(x!=0)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Zero-Inflated Gamma Density'))
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
.5*( x == 0) + .5*dgamma(x, 5, 1)*(x!=0)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Zero-Inflated Gamma Density'))
## check integrates to 1
integrate(marginal_density, lower = -1, upper = Inf)
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
.5*( x < tol) + .5*dgamma(x, 5, 1)*(x>tol)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Zero-Inflated Gamma Density'))
## check integrates to 1
integrate(marginal_density, lower = -1, upper = Inf)
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
.5*( x < tol) + .5*dgamma(x, 5, 1)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Zero-Inflated Gamma Density'))
## check integrates to 1
integrate(marginal_density, lower = -1, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -10, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -.0001, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -.1, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -1, upper = Inf)
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x < tol) + .5*dgamma(x, 5, 1) )
}
## check integrates to 1
integrate(marginal_density, lower = -1, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -10, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -100, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = 0, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -1, upper = Inf)
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x == tol) + .5*dgamma(x, 5, 1) )
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x == tol) + .5*dgamma(x, 5, 1) )
}
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
marginal_density = function(x){
tol = 1e-10
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x == 0) + .5*dgamma(x, 5, 1) )
}
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
marginal_density = function(x){
tol = 1e-5
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x < tol) + .5*dgamma(x, 5, 1) )
}
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
marginal_density = function(x){
tol = 1e-5
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x < tol) + 1*dgamma(x, 5, 1) )
}
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
marginal_density = function(x){
tol = 1e-5
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
( x>0 )*( .5*( x < tol) + .2*dgamma(x, 5, 1) )
}
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
if(x<0){
return(0)
}else if(x==0){
return(.5)
}else if(x>0){
dgamma(x, 5, 1)
}
marginal_density = function(x){
tol = 1e-5
## need tolerance since exact x==0 won't hold numerically.
##   for the integrate() function
if(x<0){
return(0)
}else if(x==0){
return(.5)
}else if(x>0){
dgamma(x, 5, 1)
}
}
## check integrates to 1
integrate(marginal_density, lower = -Inf, upper = Inf)
marginal_density = function(x){
.5*( x == 0) + .5*dgamma(x, 5, 1)
}
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
.5*( x == 0) + .5*dgamma(x, 5, 1)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Zero-Inflated Gamma Density'))
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
.5*( x == 0) + .5*dgamma(x, 5, 1)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Mixture Gamma Density'))
set.seed(1)
x = rbinom( n = 1000, size = 1, prob = .5 )
y = x*rgamma(1000, 5, 1)
hist(y, breaks = 10, freq=F, col='white',
main='Marginal Distribution of Y, f(y)')
marginal_density = function(x){
.5*( x == 0) + .5*dgamma(x, 5, 1)
}
curve(dgamma(x, 5, 1), add=T, col='red', lwd=2)
curve(marginal_density(x), add=T, col='blue', lwd=2)
legend('topright', col = c('red', 'blue'),
bty='n', lty=c(1,1), lwd=c(2,2),
legend = c('Gamma Density', 'Mixture Gamma Density'))
y1 = rnorm(50)
y2 = rnorm(50)
t.test(y1, y2)
t.test(y1, y2)$pval
t.test(y1, y2)$pvalue
t.test(y1, y2)$p.value
foo = function(){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p1 = t.test(y1, y2)$p.value
d1 = 1*(p1<.05)
return(d1)
}
res = replicate(1000, foo())
mean(res)
res = replicate(10000, foo())
mean(res)
res = replicate(20000, foo())
mean(res)
foo = function(){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p1 = t.test(y1, y2)$p.value
d1 = 1*(p1<.05)
if( d1 == 0 ){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p2 = t.test(y1, y2)$p.value
d2 = 1*(p2<.05)
}else{
d_fin = d1
}
d_fin = d2
return(d_fin)
}
res = replicate(20000, foo())
mean(res)
foo = function(){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p1 = t.test(y1, y2)$p.value
d1 = 1*(p1<.05)
if( d1 == 0 ){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p2 = t.test(y1, y2)$p.value
d2 = 1*(p2<.05)
d_fin = d2
}else{
d_fin = d1
}
return(d_fin)
}
res = replicate(20000, foo())
mean(res)
2*.05 - .05^2
res = replicate(100000, foo())
mean(res)
res = replicate(1000000, foo())
mean(res)
.025/.975
1-.025
foo = function(){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p1 = t.test(y1, y2)$p.value
d1 = 1*(p1<.025)
if( d1 == 0 ){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p2 = t.test(y1, y2)$p.value
d2 = 1*(p2< ..025/.975 )
d_fin = d2
}else{
d_fin = d1
}
return(d_fin)
}
res = replicate(20000, foo())
mean(res)
foo = function(){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p1 = t.test(y1, y2)$p.value
d1 = 1*(p1<.025)
if( d1 == 0 ){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p2 = t.test(y1, y2)$p.value
d2 = 1*(p2< .025/.975 )
d_fin = d2
}else{
d_fin = d1
}
return(d_fin)
}
res = replicate(20000, foo())
mean(res)
two_sample_test = function(n){
n = 50
y1 = rnorm(50)
y2 = rnorm(50)
p = t.test(y1, y2)$p.value
return(p)
}
two_sample_test = function(n){
p = t.test(rnorm(n), rnorm(n))$p.value
return(p)
}
sequential_test = function(n, alpha1, alpha2){
## run test 1
p1 = two_sample_test(n)
d = 1*(p1<alpha1) # accept/reject decision
## if reject, run second test
if( d1 == 0 ){
p2 = two_sample_test(n)
d = 1*(p2< alpha2 ) ## accept/reject decision
}
return(d)
}
res = replicate(20000,
sequential_test(n=50,
alpha1 = .05,
alpha2 =.05 ))
mean(res)
two_sample_test = function(n){
p = t.test(rnorm(n), rnorm(n))$p.value
return(p)
}
sequential_test = function(n, alpha1, alpha2){
## run test 1
p1 = two_sample_test(n)
d = 1*(p1<alpha1) # accept/reject decision
## if reject, run second test
if( d == 0 ){
p2 = two_sample_test(n)
d = 1*(p2< alpha2 ) ## accept/reject decision
}
return(d)
}
res = replicate(20000,
sequential_test(n=50,
alpha1 = .05,
alpha2 =.05 ))
mean(res)
two_sample_test = function(n){
p = t.test(rnorm(n), rnorm(n))$p.value
return(p)
}
seq_test = function(n, a1, a2){
## run test 1
p1 = two_sample_test(n)
d = 1*(p1 < a1) # accept/reject decision
## if reject, run second test
if( d == 0 ){
p2 = two_sample_test(n)
d = 1*(p2 < a2 ) ## accept/reject decision
}
return(d)
}
res = replicate(20000, seq_test(n=50, a1 = .05, a2 =.05 ))
mean(res) ## actual type 1 error
.05 - (.95)*.05
.05 + (.95)*.05
(.05 - .025)/(1 - .025)
### now say we want to control familywise error at a*=.05
## run the first test at a1, a2 = (a* - a1)/ (1 - a1)
## e.g. a1 = .025 and a2 = (.05 - .025)/1 - .025 = 0.02564103
a2 = (.05 - .025)/(1 - .025)
res = replicate(20000, seq_test(n=50, a1 = .025, a2 = a2 ))
mean(res) ## it works!
a2 = (.05 - .025)/(1 - .025)
res = replicate(200000, seq_test(n=50, a1 = .025, a2 = a2 ))
mean(res) ## it works!
set.seed(1)
two_sample_test = function(n){
p = t.test(rnorm(n), rnorm(n))$p.value
return(p)
}
seq_test = function(n, a1, a2){
## run test 1
p1 = two_sample_test(n)
d = 1*(p1 < a1) # accept/reject decision
## if reject, run second test
if( d == 0 ){
p2 = two_sample_test(n)
d = 1*(p2 < a2 ) ## accept/reject decision
}
return(d)
}
res = replicate(100000, seq_test(n=50, a1 = .05, a2 =.05 ))
## theoretical type 1 err should be a1 + (1-a1)*a2 = .0975
mean(res) ## actual type 1 error
### now say we want to control familywise error at a*=.05
## run the first test at a1, a2 = (a* - a1)/ (1 - a1)
## e.g. a1 = .025 and a2 = (.05 - .025)/1 - .025 = 0.02564103
a2 = (.05 - .025)/(1 - .025)
res = replicate(100000, seq_test(n=50, a1 = .025, a2 = a2 ))
mean(res) ## it works!
a2
### now say we want to control familywise error at a*=.05
## run the first test at a1, a2 = (a* - a1)/ (1 - a1)
## e.g. a1 = .025 and a2 = (.05 - .025)/1 - .025 = 0.02564103
astar = .05
a1 = .01
a2 = (astar - a1)/(1 - a1)
res = replicate(100000, seq_test(n=50, a1 = a1, a2 = a2 ))
mean(res) ## it works!
setwd("google_drive/Software/personal_site/")
list.files()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
getwd()
blogdown::build_site()
