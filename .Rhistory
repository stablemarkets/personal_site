mu1 = 0
mu2 = 0
phi=1
y1 = seq(-3,3, by=.01)
y2 = seq(-3,3, by=.01)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30,
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$") )
rho=.3
mu1 = 0
mu2 = 0
phi=1
y1 = seq(-3,3, by=.1)
y2 = seq(-3,3, by=.1)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30,
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$") )
rho=.3
mu1 = 0
mu2 = 0
phi=1
y1 = seq(-3,3, by=.1)
y2 = seq(-3,3, by=.1)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30,
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$") )
plot_bnorm = function(rho=0, mu1 = 0, mu2 = 0, phi=1, add=F, col='black'){
y1 = seq(-3,3, by=.1)
y2 = seq(-3,3, by=.1)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$") )
return()
}
plot_bnorm = function(rho=0, mu1 = 0, mu2 = 0, phi=1, add=F, col='black'){
y1 = seq(-3,3, by=.1)
y2 = seq(-3,3, by=.1)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30, add = add, col=col,
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm()
plot_bnorm = function(rho=0, mu1 = 0, mu2 = 0, phi=1, add=F, col='black'){
y1 = seq(-3,3, by=.1)
y2 = seq(-3,3, by=.1)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30, add = add, col=col,
xlim=c(-10,10), ylim=c(-10,10),
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm()
plot_bnorm(rho = .3, -5, 5, 1, add=T, col='red')
plot_bnorm = function(rho=0, mu1 = 0, mu2 = 0, phi=1, add=F, col='black'){
y1 = seq(-10,10, by=.1)
y2 = seq(-10,10, by=.1)
dmv = function(y1,y2, rho, mu1, mu2, phi){
y = c(y1, y2)
mu = c(mu1, mu2)
Sigma = phi * matrix( c(phi, rho, rho, phi), nrow=2, ncol=2, byrow=T)
eval = dmvn(c(y1, y2), mu, Sigma =  Sigma )
return(eval)
}
density_mat = matrix(NA, nrow=length(y1), ncol=length(y2))
for(i in 1:length(y1) ){
for(j in 1:length(y2) ){
density_mat[i, j] = dmv(y1[i], y2[j], rho=rho, mu1=mu1, mu2=mu2, phi = phi)
}
}
contour(y1, y2, density_mat, nlevels = 30, add = add, col=col,
xlim=c(-10,10), ylim=c(-10,10),
xlab=TeX("$\\y_1$"), ylab=TeX("$\\y_2$"),
main='Bivariate Normal Countours' )
return()
}
plot_bnorm()
plot_bnorm(rho = .3, -5, 5, 1, add=T, col='red')
plot_bnorm(rho = .7, 3, -5, 1, add=T, col='lightblue')
plot_bnorm()
plot_bnorm(rho = -.3, -5, 5, 1, add=T, col='red')
plot_bnorm(rho = .7, 3, -5, 1, add=T, col='lightblue')
plot_bnorm(rho = 0, 5, 7, 2, add=T, col='orange')
legend('bottomleft',
legend = c(TeX("$\\mu=(0,0), \\rho=0, \\phi=1$"),
TeX("$\\mu=(-5,5), \\rho-.3, \\phi=1$"),
TeX("$\\mu=(3,-5), \\rho=.7, \\phi=1$"),
TeX("$\\mu=(5,6), \\rho=0, \\phi=2$")),
col=c('black','red','lightblue', 'orange'),
lty=c(1,1,1,1))
height = c(rep(.90, 5),
rep(.65, 5),
rep(.40, 5))
height = c(rep(.90, 5),
rep(.65, 5),
rep(.40, 5))
time = c(.4312, .4349, .4314, .4315, .4336,
.3679, .3637, .3663, .3619,.3710,
.2856, .2879, .2854, .2869, .2850)
lm( height ~ log(time^2) )
1.8816*2
plot(time, height)
lm( log(height) ~ log(time^2) )
1.5387*2
lm( height ~ -1 + time^2 )
1.84*2
9.8/2
height = c(rep(.90, 5))
time = c(.4312, .4349, .4314, .4315, .4336)
lm( log(height) ~ log(time^2) )
height = c(rep(.90, 5),
rep(.65, 5),
rep(.40, 5))
time = c(.4312, .4349, .4314, .4315, .4336,
.3679, .3637, .3663, .3619,.3710,
.2856, .2879, .2854, .2869, .2850)
lm( log(height) ~ log(time^2) )
1.5387*2
lm( height ~ -1 + time^2 )
1.83*2
d = read.csv("Downloads/javalab-01-20-01-23 (1).csv")
lm(data=d, log(Disstance.m.) ~ log(Time.s.^2) )
lm(data=d, log(Distance.m.) ~ log(Time.s.^2) )
View(d)
View(d)
d= d[-1,]
lm(data=d, log(Distance.m.) ~ log(Time.s.^2) )
#1.589 = log(a/2)
a = exp(1.589)*2
a
a
height = c(rep(.90, 5),
rep(.65, 5),
rep(.40, 5))
time = c(.4312, .4349, .4314, .4315, .4336,
.3679, .3637, .3663, .3619,.3710,
.2856, .2879, .2854, .2869, .2850)
lm( log(height) ~ log(time^2) )
#log(a/2) = 1.5387
a = exp(1.5387)*2
a
d = survival::veteran
View(d)
d = d[d$status==1,]
d = survival::veteran
d = d[d$status==1,]
library(latex2exp)
omega_hat = mean(d$status)
d = survival::veteran
n = nrow(d)
omega_hat = mean(d$status)
alpha = beta = 2
omega_draws = rbeta(M,
shape1 = n*omega_hat + alpha,
beta + n*(1-omega_hat))
M = 100
alpha = beta = 2
omega_draws = rbeta(M,
shape1 = n*omega_hat + alpha,
beta + n*(1-omega_hat))
mean(omega_draws)
approx_post_mean = mean(omega_draws)
alpha_star = n*omega_hat + alpha
beta_star = beta + n*(1-omega_hat)
omega_draws = rbeta(M, shape1 = alpha_star, shape2 = beta_star)
approx_post_mean = mean(omega_draws)
exact_post_mean = alpha_star / (alpha_star+beta_star)
approx_post_mean
exact_post_mean
set.seed(1)
approx_post_mean = mean(omega_draws)
exact_post_mean = alpha_star / (alpha_star+beta_star)
Mvec = seq(1,100, 1)
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star)
approx[i] = mean(omega_draws)
}
plot(Mvec, approx - exact_post_mean, type='l')
approx
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
approx[i] = mean(rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star))
}
plot(Mvec, approx - exact_post_mean, type='l')
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var)  )
lines(Mvec, -1*sqrt(mc_var)  )
mean(d$status)
set.seed(1)
d = survival::veteran
n = nrow(d)
omega_hat = mean(d$status)
M = 100
alpha = beta = 2
alpha_star = n*omega_hat + alpha
beta_star = beta + n*(1-omega_hat)
omega_draws = rbeta(M, shape1 = alpha_star, shape2 = beta_star)
approx_post_mean = mean(omega_draws)
exact_post_mean = alpha_star / (alpha_star+beta_star)
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
approx[i] = mean(rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star))
}
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.05, .05))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var)  )
lines(Mvec, -1*sqrt(mc_var)  )
set.seed(1)
d = survival::veteran
n = nrow(d)
omega_hat = mean(d$status)
M = 100
alpha = beta = 2
alpha_star = n*omega_hat + alpha
beta_star = beta + n*(1-omega_hat)
omega_draws = rbeta(M, shape1 = alpha_star, shape2 = beta_star)
approx_post_mean = mean(omega_draws)
exact_post_mean = alpha_star / (alpha_star+beta_star)
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
approx[i] = mean(rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star))
}
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.05, .05))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var)  )
lines(Mvec, -1*sqrt(mc_var)  )
library(latex2exp)
set.seed(1)
d = survival::veteran
n = nrow(d)
omega_hat = mean(d$status)
M = 100
alpha = beta = 2
alpha_star = n*omega_hat + alpha
beta_star = beta + n*(1-omega_hat)
omega_draws = rbeta(M, shape1 = alpha_star, shape2 = beta_star)
approx_post_mean = mean(omega_draws)
exact_post_mean = alpha_star / (alpha_star+beta_star)
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
approx[i] = mean(rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star))
}
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.03, .03))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var)  )
lines(Mvec, -1*sqrt(mc_var)  )
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.03, .03),
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$$\\tilde \mu - \mu"))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var), lty=2  )
lines(Mvec, -1*sqrt(mc_var), lty=2  )
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.03, .03),
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$$\\tilde \\mu - \\mu"))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var), lty=2  )
lines(Mvec, -1*sqrt(mc_var), lty=2  )
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.03, .03),
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$$\\tilde{\\mu} - \\mu"))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
mc_var = (1/Mvec) *( (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) ) )
lines(Mvec, sqrt(mc_var), lty=2  )
lines(Mvec, -1*sqrt(mc_var), lty=2  )
legend('topright',
legend = c(TeX("\\pm \\sqrt{V[\\tilde{\\mu} - \\mu]}"),
TeX("\\tilde{\\mu} - \\mu")) )
legend('topright',
legend = c(TeX("\\pm \\sqrt{V[\\tilde{\\mu} - \\mu]}"),
TeX("\\tilde{\\mu} - \\mu")),
lty=c(2,1), col=c('black','black'))
g = function(x) x/(1-x)
g_prime = function(x) 1/( (1-x)^2 )
## Monte Carlo Variance
post_var = (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) )
mc_var = (1/Mvec) *( g_prime(alpha_star/(alpha_star+beta_star))^2 )*post_var
g_prime = function(x) 1/( (1-x)^2 )
mc_var = (1/Mvec) *( g_prime(alpha_star/(alpha_star+beta_star))^2 )*post_var
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
draws = rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star)
approx[i] = mean(draws/(1-draws))
}
draws = rbeta(10000000, shape1 = alpha_star, shape2 = beta_star)
exact_post_mean = mean(draws/(1-draws))
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.03, .03),
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$$\\tilde{\\mu} - \\mu"))
plot(Mvec, approx - exact_post_mean, type='l',
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$$\\tilde{\\mu} - \\mu"))
lines(Mvec, sqrt(mc_var), lty=2  )
lines(Mvec, -1*sqrt(mc_var), lty=2  )
abline(h=0, lty=2, col='red')
library(latex2exp)
set.seed(1)
d = survival::veteran
n = nrow(d)
omega_hat = mean(d$status)
M = 100
alpha = beta = 2
alpha_star = n*omega_hat + alpha
beta_star = beta + n*(1-omega_hat)
omega_draws = rbeta(M, shape1 = alpha_star, shape2 = beta_star)
approx_post_mean = mean(omega_draws)
exact_post_mean = alpha_star / (alpha_star+beta_star)
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
approx[i] = mean(rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star))
}
plot(Mvec, approx - exact_post_mean, type='l', ylim=c(-.03, .03),
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$$\\tilde{\\mu} - \\mu"))
abline(h=0, lty=2, col='red')
## Monte Carlo Variance
post_var = (alpha_star*beta_star)/( ((alpha_star+beta_star)^2)*(alpha_star+beta_star+1) )
mc_var = (1/Mvec) * post_var
lines(Mvec, sqrt(mc_var), lty=2  )
lines(Mvec, -1*sqrt(mc_var), lty=2  )
legend('topright',
legend = c(TeX("\\pm \\sqrt{V[\\tilde{\\mu} - \\mu]}"),
TeX("\\tilde{\\mu} - \\mu")),
lty=c(2,1), col=c('black','black'))
g_prime = function(x) 1/( (1-x)^2 )
mc_var = (1/Mvec) *( g_prime(alpha_star/(alpha_star+beta_star))^2 )*post_var
Mvec = seq(1,100, 1)
len_Mvec = length(Mvec)
approx = numeric(len_Mvec)
for(i in 1:len_Mvec){
draws = rbeta(Mvec[i], shape1 = alpha_star, shape2 = beta_star)
approx[i] = mean(draws/(1-draws))
}
draws = rbeta(10000000, shape1 = alpha_star, shape2 = beta_star)
exact_post_mean = mean(draws/(1-draws))
plot(Mvec, approx - exact_post_mean, type='l',
main = TeX("Inference for $\\theta = \\omega/(1-\\omega)$"),
xlab = TeX("Monte Carlo Iterations, M"),
ylab = TeX("$\\tilde{\\mu} - \\mu$"))
abline(h=0, lty=2, col='red')
lines(Mvec, sqrt(mc_var), lty=2  )
lines(Mvec, -1*sqrt(mc_var), lty=2  )
abline(h=0, lty=2, col='red')
legend('topright',
legend = c(TeX("\\pm \\sqrt{V[\\tilde{\\mu} - \\mu]}"),
TeX("\\tilde{\\mu} - \\mu")),
lty=c(2,1), col=c('black','black'))
library(LaplacesDemon)
x = mvtnorm::rmvnorm(n = 1, mean = c(0,0), sigma = diag(2) )
library(LaplacesDemon)
M = 100
x = numeric(length = M)
## initial condition
x[1] = mvtnorm::rmvnorm(n = 1, mean = c(0,0), sigma = diag(2) )
## simulate
for(i in 2:M){
x[m] = mvtnorm::rmvnorm(n = 1, mean = x[m-1], sigma = diag(2) )
}
library(LaplacesDemon)
M = 100
x = numeric(length = M)
## initial condition
x[1] = mvtnorm::rmvnorm(n = 1, mean = c(0,0), sigma = diag(2) )
## simulate
for(m in 2:M){
x[m] = mvtnorm::rmvnorm(n = 1, mean = x[m-1], sigma = diag(2) )
}
diag(2)
x = matrix(ncol=2, nrow = M)
library(LaplacesDemon)
M = 100
x = matrix(ncol=2, nrow = M)
## initial condition
x[1,] = mvtnorm::rmvnorm(n = 1, mean = c(0,0), sigma = diag(2) )
## simulate
for(m in 2:M){
x[m, ] = mvtnorm::rmvnorm(n = 1, mean = x[m-1, ], sigma = diag(2) )
}
plot(x[,1], x[,2])
plot(x[,1], x[,2], type='s')
plot(x[,1], x[,2], type='l')
set.seed(1)
set.seed(1)
M = 100
x = matrix(ncol=2, nrow = M)
## initial condition
x[1,] = mvtnorm::rmvnorm(n = 1, mean = c(0,0), sigma = diag(2) )
## simulate
for(m in 2:M){
x[m, ] = mvtnorm::rmvnorm(n = 1, mean = x[m-1, ], sigma = diag(2) )
}
for(m in 1:M){
plot(x[1:m,1], x[1:m,2], type='l', xlim=c(-5,5), ylim=c(-5,5))
}
for(m in 1:M){
plot(x[1:m,1], x[1:m,2], type='l', xlim=c(-5,5), ylim=c(-5,5))
}
library(LaplacesDemon)
library(latex2exp)
setwd("~/google_drive/Software/personal_site/")
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
