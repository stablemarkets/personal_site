plot(apply(dlist$cbar,2, sum, na.rm=T))
plot(apply(dlist$tbar,2, sum, na.rm=T))
plot(apply(dlist$ybar,2, sum, na.rm=T))
plot(apply(dlist$abar,2, mean))
View(death_times)
dlong = left_join(death_times, by='id')
dlong = left_join(y = death_times, by='id')
dlong = left_join(x=dlong, y = death_times, by='id')
View(dlong)
View(dlong)
View(dlong)
dlong %>%
filter(is.na(Tk) ) %>% ## drop rows after censoring time
filter(Tk>death_int)
View(dlong)
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop rows after censoring time
filter(Tk<=death_int)
View(dlong)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop rows after censoring time
filter(k<=death_int)
View(dlong)
length(unique(dlong$id))
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
View(dlong)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
View(dlong)
dlong = flag = k<=death_int
dlong$flag = dlong$k<=dlong$death_int
View(dlong)
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
View(dlong)
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop rows after censoring time
filter(flag)
length(unique(dlong$id))
View(dlong)
Ldat = data.frame(id=1:N, L=dlist$L)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_joint(x=dlong, y = Ldat, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
View(dlong)
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop redundant rows after censoring time
filter(flag) ## drop redundant rows after death
length(unique(dlong$id))
View(dlong)
dlong = dlong %>%
select(id, k, Tk, Ck, Ak, Yk, L)
View(dlong)
View(dlong)
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
stan_data = list(kvec=dlong$k, Tk=dlong$Tk, Ak=dlong$Ak, Yk=dlong$Yk, L=dlong$L,
N = nrow(dlong), K=K)
library(cmdstanr)
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
pars = draws$draws("beta0", "beta1", "beta2")
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
pars = draws$draws("beta0")
pars = draws$draws("beta0","beta1")
pars = draws$draws(variables = c("beta0","beta1"  ))
pars = draws$draws(variables = c("beta0","beta1", "beta2"))
pars[[1]]
pars[1]
summary(pars)
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
pars = draws$draws(variables = c("beta0","beta1", "beta2"),format = F)
pars = draws$draws(variables = c("beta0","beta1", "beta2"),format = 'matrix')
View(pars)
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
beta1 = draws$draws(variables = c("beta1"),format = 'matrix')
beta2 = draws$draws(variables = c("beta2"),format = 'matrix')
theta0 = draws$draws(variables = c("theta0"),format = 'matrix')
theta1 = draws$draws(variables = c("theta1"),format = 'matrix')
theta2 = draws$draws(variables = c("theta2"),format = 'matrix')
rep(1, 10)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
rstan:::rstudio_stanc("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
View(dlong)
IR1 = sim_dat(1000000, K, sim_int = 6)
IR0 = sim_dat(1000000, K, sim_int = K+1)
IR1 - IR0
IRR_true = IR1 - IR0
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
beta1 = draws$draws(variables = c("beta1"),format = 'matrix')
beta2 = draws$draws(variables = c("beta2"),format = 'matrix')
theta0 = draws$draws(variables = c("theta0"),format = 'matrix')
theta1 = draws$draws(variables = c("theta1"),format = 'matrix')
theta2 = draws$draws(variables = c("theta2"),format = 'matrix')
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
avg_rate_condL_K1
avg_rate_condL_interv
interv
K+1
hist(avg_rate_condL_interv-avg_rate_condL_K1)
beta1[m,]
theta1[m,]
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
exp(.24)
View(dlong)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
freq_mod = function(dlist, K){
###### train models ######
ymod_list = vector(mode = 'list', length = K)
tmod_list = vector(mode = 'list', length = K)
tmod_list[[1]] = 0
ymod_list[[1]] = glm(dlist$ybar[, 1] ~ dlist$abar[, 1] + dlist$L, family=poisson("log") )
for(k in 2:K){
atrisk = which(dlist$tbar[,k-1] == 0 & dlist$cbar[,k-1]==0 )
tmod_list[[k]] = glm(dlist$tbar[atrisk, k] ~ dlist$abar[atrisk,k] + dlist$L[atrisk],
family = binomial('logit') )
ymod_list[[k]] = glm(dlist$ybar[atrisk, k] ~ dlist$abar[atrisk,k] + dlist$L[atrisk],
family = poisson('log')  )
}
return(list(tmods=tmod_list, ymods=ymod_list))
}
freq_gcomp = function(Lvec, mods, interv, K){
sim_L = Lvec
iter = length(Lvec)
B = 20
ir_shell = matrix(nrow=iter, ncol=B)
for( b in 1:B){
ybar = matrix(nrow = iter, ncol = K)
tbar = matrix(nrow = iter, ncol = K)
abar = matrix(nrow = iter, ncol = K)
abar[, 1] = 1 * ( 1 >= interv )
tbar[, 1] = 0 ## everyone alive initially
ybar[, 1] = rpois(iter, exp( cbind(1, abar[,1], sim_L) %*% mods$ymods[[1]]$coefficients) )
for(k in 2:K){
abar[, k] = 1 * ( k >= interv )
tbar[, k] = rbern(iter, invlogit( cbind(1, abar[, k],  sim_L) %*% mods$tmods[[k]]$coefficients) )
ybar[, k] = rpois(iter, exp( cbind(1, abar[, k], sim_L) %*% mods$ymods[[k]]$coefficients) )
tbar[ tbar[, k-1]==1 , k] = 1 ## if someone is dead, they stay dead
ybar[ tbar[, k-1]==1 , k] = 0 ## if someone is dead, hospitalization is 0
}
ir_shell[, b] = rowSums(ybar) / (K - rowSums(tbar) )
}
return(mean(rowMeans( ir_shell ) ))
}
## train K model...one for each interval, stored as list mods
mods = freq_mod(dlist, K)
## using tained models, do g-comp
IR1_hat = freq_gcomp(Lvec = dlist$L, mods = mods, interv = 6, K = K)
IR0_hat = freq_gcomp(Lvec = dlist$L, mods = mods, interv = K+1, K = K)
IRR_hat = IR1_hat - IR0_hat
c(IR1_hat, IR1, IR0_hat, IR0, IRR_hat, IRR_true)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
post_ird
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
IR1_hat
IR0_hat
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, K+1, K, 1000)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
hist(post_ird)
hist(beta0[,1])
hist(beta0[,2])
hist(beta0[,3])
hist(beta0[,4])
hist(beta0[,5])
hist(beta0[,6])
hist(beta0[,1])
hist(beta0[,12])
hist(beta1[,1])
hist(beta1[,2])
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_tc_int.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
hist(beta0[,1])
theta0 = draws$draws(variables = c("theta0"),format = 'matrix')
hist(theta0[,1])
hist(theta0[,2])
hist(theta2[,1])
hist(theta3[,1])
hist(theta0[,1])
hist(theta1[,1])
hist(theta2[,1])
View(dlong)
View(death_times)
## transpose data and reshape for stan
kvec = rep(1:K,N)
id = sort(rep(1:N, K))
to_long = function(mat){
dt = data.frame(mat)
colnames(dt) = 1:K
tvec =  dt %>%
pivot_longer(cols = 1:K,
names_to = 'k',
values_to = 'Tk')
return(tvec$Tk)
}
tvec = to_long(dlist$tbar)
cvec = to_long(dlist$cbar)
avec = to_long(dlist$abar)
yvec = to_long(dlist$ybar)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
View(dlong)
View(dlist$ybar)
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_tc_int.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
hist(beta0[,1])
hist(beta0[,2])
hist(beta0[,3])
sum(dlist$tbar[, 6])
sum(dlist$tbar[, 6], na.rm=T)
sum(dlong$Tk[dlong$k==6])
sum(dlong$Tk[dlong$k==6], na.rm=T)
sum(dlong$Ak[dlong$k==6])
View(dlong)
stan_data$L
View(death_times)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop redundant rows after censoring time
filter(flag) ## drop redundant rows after death
dlong = dlong %>%
select(id, k, Tk, Ck, Ak, Yk, L)
length(unique(dlong$id))
sum(dlong$Tk[dlong$k==6])
sum(dlist$tbar[,6], na.rm=T)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
dlong$flag = TRUE
View(dlong)
View(dlong)
dlong$flag[dlong$k>dlong$death_int] = FALSE
View(dlong)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop redundant rows after censoring time
filter(flag) ## drop redundant rows after death
dlong = dlong %>%
select(id, k, Tk, Ck, Ak, Yk, L)
sum(dlist$tbar[,6], na.rm=T)
sum(dlong$Tk[dlong$k==6])
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
dlong = dlong %>%
filter(!is.na(Tk) )
sum(dlong$Tk[dlong$k==6])
View(dlong)
View(dlist$tbar)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop redundant rows after censoring time
filter(flag) ## drop redundant rows after death
dlong = dlong %>%
select(id, k, Tk, Ck, Ak, Yk, L)
dlong %>% group_by(k) %>% summarise(sum(Tk))
dlong %>% group_by(k) %>% summarise(cumsum(Tk))
dlong %>% group_by(k) %>% summarise(sum(Tk))
dlong %>% group_by(k) %>% summarise(dt = sum(Tk)) %>% mutate(cumsum(dt))
sum(dlist$tbar[,11])
sum(dlist$tbar[,11], na.rm=T)
sum(dlist$tbar[,4], na.rm=T)
sum(dlist$tbar[,16], na.rm=T)
sum(dlist$tbar[,12], na.rm=T)
View(dlong)
stan_data = list(kvec=dlong$k, Tk=dlong$Tk, Ak=dlong$Ak, Yk=dlong$Yk, L=dlong$L,
N = nrow(dlong), K=K)
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_tc_int.stan")
## simulate data
dlist = sim_dat(N, K)
kvec = rep(1:K,N)
id = sort(rep(1:N, K))
to_long = function(mat){
dt = data.frame(mat)
colnames(dt) = 1:K
tvec =  dt %>%
pivot_longer(cols = 1:K,
names_to = 'k',
values_to = 'Tk')
return(tvec$Tk)
}
tvec = to_long(dlist$tbar)
cvec = to_long(dlist$cbar)
avec = to_long(dlist$abar)
yvec = to_long(dlist$ybar)
dlong = data.frame(id=id, k = kvec, Tk=tvec, Ck=cvec, Ak=avec, Yk=yvec)
Ldat = data.frame(id=1:N, L=dlist$L)
death_times = dlong %>%
group_by(id) %>%
summarise(death_int = min(k[Tk==1])) %>%
filter(is.finite(death_int))
dlong = left_join(x=dlong, y = death_times, by='id')
dlong = left_join(x=dlong, y = Ldat, by='id')
dlong$flag = TRUE
dlong$flag[dlong$k>dlong$death_int] = FALSE
dlong = dlong %>%
filter(!is.na(Tk) ) %>% ## drop redundant rows after censoring time
filter(flag) ## drop redundant rows after death
dlong = dlong %>%
select(id, k, Tk, Ck, Ak, Yk, L)
length(unique(dlong$id))
stan_data = list(kvec=dlong$k, Tk=dlong$Tk, Ak=dlong$Ak, Yk=dlong$Yk, L=dlong$L,
N = nrow(dlong), K=K)
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
beta1 = draws$draws(variables = c("beta1"),format = 'matrix')
beta2 = draws$draws(variables = c("beta2"),format = 'matrix')
hist(beta0)
hist(beta1)
hist(beta2)
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_tc_int.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
beta1 = draws$draws(variables = c("beta1"),format = 'matrix')
beta2 = draws$draws(variables = c("beta2"),format = 'matrix')
hist(beta0)
hist(beta1)
hist(beta2)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
hist(beta1)
hist(theta0)
hist(theta1)
hist(theta2)
hist(beta1)
hist(beta0)
hist(beta2)
hist(post_ird)
View(dlong)
View(dlist$ybar)
glm(dlong, formula Yk ~ Ak + L, family=poisson('log'))
glm(dlong, formula=  Yk ~ Ak + L, family=poisson('log'))
hist(theta0)
hist(theta1)
theta0 = draws$draws(variables = c("theta0"),format = 'matrix')
theta1 = draws$draws(variables = c("theta1"),format = 'matrix')
theta2 = draws$draws(variables = c("theta2"),format = 'matrix')
hist(theta0)
hist(theta1)
hist(theta3)
hist(theta2)
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
abline(h=IRR_true, col='red', lwd=2)
hist(post_ird)
abline(v=IRR_true, col='red', lwd=2)
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
#mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
mod = cmdstan_model("google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes.stan")
draws = mod$sample(data=stan_data, chains=1,
iter_warmup = 1000, iter_sampling = 1000)
draws$summary()
draws$summary("beta0")
draws$summary("beta1")
draws$summary("beta2")
draws$summary("theta0")
draws$summary("theta1")
source("~/google_drive/Teaching/Theses/2023/Anthony/trt_switch_bayes_helper.r")
beta0 = draws$draws(variables = c("beta0"),format = 'matrix')
beta1 = draws$draws(variables = c("beta1"),format = 'matrix')
beta2 = draws$draws(variables = c("beta2"),format = 'matrix')
theta0 = draws$draws(variables = c("theta0"),format = 'matrix')
theta1 = draws$draws(variables = c("theta1"),format = 'matrix')
theta2 = draws$draws(variables = c("theta2"),format = 'matrix')
post_ird = bayes_gcomp(dlist$L, beta0, beta1, beta2, theta0,theta1, theta2, 6, K, 1000)
hist(post_ird)
abline(v=IRR_true, col='red', lwd=2)
(mean(post_ird) - IRR_true) / IRR_true
(median(post_ird) - IRR_true) / IRR_true
load("/Users/arman/google_drive/Research/treatment_switch_immortal/simulations/output/simulated_data/0.1_simulated_data_s1.Rdata")
library(dplyr)
library(tidyr)
library(rstan)
library(LaplacesDemon)
dlist = simulated_dlist[[1]]
warmup = 100
ndraws = 200
N = nrow(dlist$abar)
K = ncol(dlist$abar)
P = ncol(dlist$L)
dlong = wide_to_long(dlist, K, N)
stan_data = list(kvec=dlong$k,
Tk=dlong$Tk,
Ak=dlong$Ak,
Yk=dlong$Yk,
L=cbind(dlong[,paste0("L.",1:P)]) ,
N = nrow(dlong), K=K, P=P)
source("~/google_drive/Research/treatment_switch_immortal/simulations/source_bayes/helper_functions.R")
dlong = wide_to_long(dlist, K, N)
stan_data = list(kvec=dlong$k,
Tk=dlong$Tk,
Ak=dlong$Ak,
Yk=dlong$Yk,
L=cbind(dlong[,paste0("L.",1:P)]) ,
N = nrow(dlong), K=K, P=P)
mod = cmdstan_model("source_bayes/trt_switch_bayes.stan")
stan_model("google_drive/Research/treatment_switch_immortal/simulations/source_bayes/trt_switch_bayes.stan")
mod = stan_model("google_drive/Research/treatment_switch_immortal/simulations/source_bayes/trt_switch_bayes.stan")
fit = sampling(mod, data=stan_data, nchains=1, iter=ndraws, warmup=warmup)
fit = sampling(mod, data=stan_data, chains=1, iter=ndraws, warmup=warmup)
beta0 = extract(fit, "beta0")
beta1 = extract(fit, "beta1")
beta0 = extract(fit, "beta0")[[1]]
beta1 = extract(fit, "beta1")[[1]]
theta0 = extract(fit, "theta0")[[1]]
theta1 = extract(fit, "theta1")[[1]]
post_ird = bayes_gcomp(dlist$L, beta0, beta1, theta0, theta1, 10, K, ndraws)
setwd("google_drive/Software/personal_site/")
blogdown::serve_site()
blogdown::build_site()
