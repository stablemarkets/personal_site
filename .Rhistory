curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F)
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T)
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 10000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 10000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 3000
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 1000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /30) ), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 5000
n = 30
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /n) ), col='red', add=T, lwd=2)
print(sample_means)
sample_variance = ( 1 / (n - 1) ) * sum( data_matrix[, 1] - mean(data_matrix[,1])  )
sample_variance
sample_variance = ( 1 / (n - 1) ) * sum( (data_matrix[, 1] - mean(data_matrix[,1]))^2  )
sample_variance
( (n - 1) / (10^2) ) * sample_variance
U = ( (n - 1) / (10^2) ) * sample_variance
calc_sample_variance = function(data_column){
sample_variance = ( 1 / (n - 1) ) * sum( (data_column - mean(data_column))^2  )
return(sample_variance)
}
sample_variances = apply(data_matrix, 2, calc_sample_variance)
chi_sq_stats = ( (n-1) / (10^2) )*sample_variances
hist(chi_sq_stats, breaks=100, freq=F)
curve(dchisq(x, df = n-1), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 5000
n = 30
## population distribution is N(0, 10^2)
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
#### --------- Example 1: Distribution of Sample Mean --------------------- ####
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
print(sample_means)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /n) ), col='red', add=T, lwd=2)
#### --------- Example 1: Distribution of Sample Variance ----------------- ####
## function to take in each column of data_matrix and compute sample variance
calc_sample_variance = function(data_column){
sample_variance = ( 1 / (n - 1) ) * sum( (data_column - mean(data_column))^2  )
return(sample_variance)
}
## loop through each column of data_matrix and apply function calc_sample_variance
sample_variances = apply(data_matrix, 2, calc_sample_variance)
## compute ( (n-1)/10^2 ) S^2 (from slide 16) - should have chi-sq with n-1 DF
chi_sq_stats = ( (n-1) / (10^2) )*sample_variances
hist(chi_sq_stats, breaks=100, freq=F)
curve(dchisq(x, df = n-1), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 5000
n = 30
## population distribution is N(0, 10^2)
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
#### --------- Example 1: Distribution of Sample Mean --------------------- ####
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
print(sample_means)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /n) ), col='red', add=T, lwd=2)
#### --------- Example 1: Distribution of Sample Variance ----------------- ####
## function to take in each column of data_matrix and compute sample variance
calc_sample_variance = function(data_column){
sample_variance = ( 1 / (n - 1) ) * sum( (data_column - mean(data_column))^2  )
return(sample_variance)
}
## loop through each column of data_matrix and apply function calc_sample_variance
sample_variances = apply(data_matrix, 2, calc_sample_variance)
## compute ( (n-1)/10^2 ) S^2 (from slide 16) - should have chi-sq with n-1 DF
chi_sq_stats = ( (n-1) / (10^2) )*sample_variances
hist(chi_sq_stats, breaks=100, freq=F)
curve(dchisq(x, df = n-1), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 5000
n = 30
## population distribution is N(0, 10^2)
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
#### --------- Example 1: Distribution of Sample Mean --------------------- ####
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
print(sample_means)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /n) ), col='red', add=T, lwd=2)
#### --------- Example 1: Distribution of Sample Variance ----------------- ####
## function to take in each column of data_matrix and compute sample variance
calc_sample_variance = function(data_column){
sample_variance = ( 1 / (n - 1) ) * sum( (data_column - mean(data_column))^2  )
return(sample_variance)
}
## loop through each column of data_matrix and apply function calc_sample_variance
sample_variances = apply(data_matrix, 2, calc_sample_variance)
## compute ( (n-1)/10^2 ) S^2 (from slide 16) - should have chi-sq with n-1 DF
chi_sq_stats = ( (n-1) / (10^2) )*sample_variances
hist(chi_sq_stats, breaks=100, freq=F)
curve(dchisq(x, df = n-1), col='red', add=T, lwd=2)
set.seed(123)
num_samples = 5000
n = 30
## population distribution is N(0, 10^2)
data_matrix = replicate(num_samples, rnorm(n, 0, sd = 10))
rownames(data_matrix) = paste0('subject ', 1:n)
colnames(data_matrix) = paste0('sample ', 1:num_samples)
View(data_matrix)
## compute the  mean of each sample across n subjects
sample_means = colMeans(data_matrix)
length(sample_means)
print(sample_means)
hist(sample_means, breaks=100, freq=F,
main = 'sampling distribution of sample mean', xlab='sample mean')
curve(dnorm(x, mean = 0, sd = sqrt( (10^2) /n) ), col='red', add=T, lwd=2)
## function to take in each column of data_matrix and compute sample variance
calc_sample_variance = function(data_column){
sample_variance = ( 1 / (n - 1) ) * sum( (data_column - mean(data_column))^2  )
return(sample_variance)
}
## loop through each column of data_matrix and apply function calc_sample_variance
sample_variances = apply(data_matrix, 2, calc_sample_variance)
sample_variances
## compute ( (n-1)/10^2 ) S^2 (from slide 16) - should have chi-sq with n-1 DF
chi_sq_stats = ( (n-1) / (10^2) )*sample_variances
hist(chi_sq_stats, breaks=100, freq=F)
curve(dchisq(x, df = n-1), col='red', add=T, lwd=2)
View(data_matrix)
set.seed(1)
hist(rexp(5000, 2), breaks=50)
## mean = 1/2 = .5
## var = 1/2^2 = .25
calc_stat = function(n){
y = rexp(n, rate=2)
return( sqrt(n)*( mean(y) - 1/2 ) / sqrt( (1/2)^2 ) )
}
par(mfrow=c(2, 2))
res = replicate(5000, calc_stat(10) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=10' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(30) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=30' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(100) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=100' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(1000) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=1000' )
curve( dnorm(x), add=T, col='red')
#----------------------------------------------------------#
### ---- Convergence in probability to a constant ---- #####
#----------------------------------------------------------#
## function that draws X_1,...,X_n iid  N(100, sd=10)
## and calculates the mean xbar_n
calc_xbar = function(n) mean(rnorm(n, 100, 10))
## let's do this for n=1, 2, ..., 10,000
trials = 1:10000
xbar_trials = sapply(trials, calc_xbar)
plot(trials, xbar_trials, type='l' )
abline(h=100, col='red', lwd=2)
xbar_trials[9995:10000] - 100
## recall that X --p-> mu implies X --d-> dirac_mu
## i.e. the *distribution* of xbar should
## converge to a point-mass at 100.
dirac =function(x) 1*(x>100)
curve( dirac(x) , add=F, col='red', from=80, to=120,
ylab='CDF of xbar')
## plot cdf of 1000 draws from the distribution of xbar n=10.
res = replicate(1000, calc_xbar(10))
lines(ecdf(res), col='gray')
## plot cdf of 1000 draws from the distribution of xbar n=100.
res = replicate(1000, calc_xbar(100))
plot(ecdf(res), add=T, col='blue')
## plot cdf of 1000 draws from the distribution of xbar n=1000.
res = replicate(1000, calc_xbar(1000))
plot(ecdf(res), add=T,col='darkgreen')
#----------------------------------------------------------#
### -------  Convergence in distribution    ---------- #####
#----------------------------------------------------------#
## now let us examine not the distribution of xbar, but
## sqrt(n) ( xbar - E[X] ) / sqrt(V[X])
## The CLT says this should converge in distribution to std. normal.
set.seed(1)
hist(rexp(100, .1))
## mean = 1/.1 = 10
## var = 1/.1^2 = 100
calc_stat = function(n){
y = rexp(n, rate=1/10)
return( sqrt(n)*( mean(y) - 10 ) / 10 )
}
par(mfrow=c(1, 3))
res = replicate(5000, calc_stat(10) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=10' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(100) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=100' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(1000) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=1000' )
curve( dnorm(x), add=T, col='red')
#----------------------------------------------------------#
### ---- Convergence in probability to a constant ---- #####
#----------------------------------------------------------#
## function that draws X_1,...,X_n iid  N(100, sd=10)
## and calculates the mean xbar_n
calc_xbar = function(n) mean(rnorm(n, 100, 10))
## let's do this for n=1, 2, ..., 10,000
trials = 1:10000
xbar_trials = sapply(trials, calc_xbar)
plot(trials, xbar_trials, type='l' )
abline(h=100, col='red', lwd=2)
xbar_trials[9995:10000] - 100
dirac =function(x) 1*(x>100)
curve( dirac(x) , add=F, col='red', from=80, to=120,
ylab='CDF of xbar')
## plot cdf of 1000 draws from the distribution of xbar n=10.
res = replicate(1000, calc_xbar(10))
lines(ecdf(res), col='gray')
## plot cdf of 1000 draws from the distribution of xbar n=10.
res = replicate(1000, calc_xbar(10))
lines(ecdf(res), col='gray')
## plot cdf of 1000 draws from the distribution of xbar n=100.
res = replicate(1000, calc_xbar(100))
plot(ecdf(res), add=T, col='blue')
## plot cdf of 1000 draws from the distribution of xbar n=1000.
res = replicate(1000, calc_xbar(1000))
plot(ecdf(res), add=T,col='darkgreen')
## now let us examine not the distribution of xbar, but
## sqrt(n) ( xbar - E[X] ) / sqrt(V[X])
## The CLT says this should converge in distribution to std. normal.
set.seed(1)
hist(rexp(100, .1))
## mean = 1/.1 = 10
## var = 1/.1^2 = 100
calc_stat = function(n){
y = rexp(n, rate=1/10)
return( sqrt(n)*( mean(y) - 10 ) / 10 )
}
par(mfrow=c(1, 3))
res = replicate(5000, calc_stat(10) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=10' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(100) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=100' )
curve( dnorm(x), add=T, col='red')
res = replicate(5000, calc_stat(1000) )
hist(res, freq=F, xlim=c(-4,4), breaks=50, main='n=1000' )
curve( dnorm(x), add=T, col='red')
#----------------------------------------------------------#
### -------------- Simulate Some Data    ------------- #####
#----------------------------------------------------------#
set.seed(10)
n = 100
x = rnorm(n, mean = 0, sd = 1)
y = x + rnorm(n, mean = 0, sd = 1)
## what is Cov(X, Y) ?
## Cov(X, X + Z) = Var(X) + Cov(X, Z) = Var(X) = 1
## what is Var[X] = 1^2 --> SD(X) = 1
## what is Var[Y] = E[ V[Y|X] ] + V[ E[Y|X] ]
##                =  1 + V[X] = 1 + 1 = 2
## so true cor(X,Y) = Cov(X, Y)/ sd(X)sd(Y) = 1/sqrt(2)
## so,
true_corr = 1/sqrt(2)
#----------------------------------------------------------#
### ------------ Bootstrap - Manual Approach---------- #####
#----------------------------------------------------------#
B = 1000
bootstrap_iter = function(x, y, n){
idx = sample(x = 1:n, size = n, replace = T )
x_b = x[idx]
y_b = y[idx]
cor(x_b, y_b)
}
bootstrap_dist = replicate(n = B, expr = bootstrap_iter(x,y,n) )
bootstrap_dist
hist(bootstrap_dist, breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
#----------------------------------------------------------#
### ------------ Bootstrap - R Package      ---------- #####
#----------------------------------------------------------#
library(boot)
pearson = function(data, idx ){
cor( data[idx, 1], data[idx,2] )
}
bootstrap_dist_pack = boot(data = cbind(x, y),
statistic = pearson,
R = B)
hist(bootstrap_dist_pack$t,
breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
#----------------------------------------------------------#
### -------------- Simulate Some Data    ------------- #####
#----------------------------------------------------------#
set.seed(10)
n = 100
x = rnorm(n, mean = 0, sd = 1)
y = x + rnorm(n, mean = 0, sd = 1)
plot(x,y)
## what is Cov(X, Y) ?
## Cov(X, X + Z) = Var(X) + Cov(X, Z) = Var(X) = 1
## what is Var[X] = 1^2 --> SD(X) = 1
## what is Var[Y] = E[ V[Y|X] ] + V[ E[Y|X] ]
##                =  1 + V[X] = 1 + 1 = 2
## so true cor(X,Y) = Cov(X, Y)/ sd(X)sd(Y) = 1/sqrt(2)
## so,
true_corr = 1/sqrt(2)
true_corr
?cor
#----------------------------------------------------------#
### ------------ Bootstrap - Manual Approach---------- #####
#----------------------------------------------------------#
B = 1000
bootstrap_iter = function(x, y, n){
idx = sample(x = 1:n, size = n, replace = T )
x_b = x[idx]
y_b = y[idx]
cor(x_b, y_b)
}
bootstrap_dist = replicate(n = B, expr = bootstrap_iter(x,y,n) )
bootstrap_dist
hist(bootstrap_dist, breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
mean(bootstrap_dist)
sd(bootstrap_dist)
#----------------------------------------------------------#
### ------------ Bootstrap - R Package      ---------- #####
#----------------------------------------------------------#
library(boot)
pearson = function(data, idx ){
cor( data[idx, 1], data[idx,2] )
}
?boot
bootstrap_dist_pack = boot(data = cbind(x, y),
statistic = pearson,
R = B)
hist(bootstrap_dist_pack$t,
breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
set.seed(130)
n=1000
## generate data from Gamma.
x = rgamma(n = n, shape = 10, scale = 10)
sample_mean = function(data, idx ){ mean( data[idx] ) }
boot_smean = boot(data = x, statistic = sample_mean, R = 5000)
hist(boot_smean$t,
breaks = 50, xlim=c(90, 110),
main = 'Bootstrap distribution of sample mean',
xlab = 'xbar', freq=F)
## by CLT, xbar ~ N( shape*scale, (shape*scale^2) / n  )
curve(dnorm(x, mean = 100, sd=sqrt(10*(10^2)/n) ), col='red', add=T)
y = rgamma(300, shape=10, rate=7)
y
## plot simulated data
hist(y, freq=F, breaks=100)
beta_hat = mean(y)/( (mean(y^2)) - mean(y)^2)
alpha_hat = mean(y)*beta_hat
curve(dgamma(x, shape = alpha_hat, rate = beta_hat),
col='red', add=T)
alpha_hat
beta_hat
100*.002
qnorm(.995)
(10*(100.4/100 - 1))/.05
1-pnorm(.8)
n = 100
B = 1000
runif(n, 0, 1)
runif(n, 0, 1)
runif(n, 0, 1)
runif(n, 0, 1)
data = replicate(n = B, runif(n, 0, 1))
dim(data)
View(data)
min(data[, 1])
min(data[, 2])
min(data[, 3])
all_mins = apply(data, 2, min)
epsilon = .001
prop_less_epsilon = mean(all_mins < epsilon)
prop_less_epsilon
all_mins < epsilon
mean(all_mins < epsilon)
setwd("google_drive/Software/personal_site/")
blogdown::build_site()
blogdown::build_site()
