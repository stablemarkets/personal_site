plot(MH_cache$post_draws[,2], type='l')
abline(h=2)
plot(MH_cache$post_draws[,3], type='l')
abline(h=1)
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2)
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = phi, lambda = lambda, X = X, Y = Y,
mh_trials=10000, jump_v=1, p=4)
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = phi, lambda = lambda, X = X, Y = Y,
mh_trials=1000, jump_v=1, p=4)
plot(MH_cache$post_draws[,1], type='l')
plot(MH_cache$post_draws[,2], type='l')
plot(MH_cache$post_draws[,3], type='l')
plot(MH_cache$post_draws[,4], type='l')
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0)
plot(MH_cache$post_draws[,2], type='l')
abline(h=2)
plot(MH_cache$post_draws[,3], type='l')
abline(h=1)
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = phi, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.5, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = 1000, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.5, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = 2, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.5, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = 5, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.7, p=4)
# hyper-parameters and true values
lambda<-c(0,0,0,0)
phi<-10
true_beta <- matrix(c(0,2,1,-2),ncol=1)
N<-50000
# simulate covariates
X1 <- rnorm(N)
X2 <- rnorm(N)
X3 <- rnorm(N)
X <- model.matrix(~ X1 + X2 + X3)
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = 5, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache = mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=5000, jump_v=.7, p=4)
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.7, p=4)
MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
par(mfrow=c(2,2))
plot(MH_vanilla$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_vanilla$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_vanilla$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_vanilla$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.7, p=4)
set.seed(1)
MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
par(mfrow=c(2,2))
plot(MH_vanilla$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_vanilla$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_vanilla$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_vanilla$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=1, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.1, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.2, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.25, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.2, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.1, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.01, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
#
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.05, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.005, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.01, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.015, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.0175, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=2000, jump_v=.02, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
MH_cache$accept
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=10000, jump_v=.02, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
set.seed(1)
MH_cache <- mh_cache(beta_0 = c(0,0,0,0),
phi = 100, lambda = lambda, X = X, Y = Y,
mh_trials=20000, jump_v=.02, p=4)
# set.seed(1)
# MH_vanilla <- mh_vanilla(beta_0 = c(0,0,0,0),
#                        phi = 100, lambda = lambda, X = X, Y = Y,
#                        mh_trials=2000, jump_v=.7, p=4)
par(mfrow=c(2,2))
plot(MH_cache$post_draws[,1], type='l')
abline(h=0, col='red')
plot(MH_cache$post_draws[,2], type='l')
abline(h=2, col='red')
plot(MH_cache$post_draws[,3], type='l')
abline(h=1, col='red')
plot(MH_cache$post_draws[,4], type='l')
abline(h=-2, col='red')
devtools::install_github("stablemarkets/ChiRP")
library(ChiRP)
?ChiRP
?ChiRP::ZDPMix
getwed()
getwd()
devtools::install_github("stablemarkets/ChiRP")
library(ChiRP)
# Simulate data from sin() wave.
set.seed(3)
n <- 200
# training
x<-seq(1,10*pi, length.out = n) # confounder
y<-rnorm( n = length(x), sin(.5*x), .07*x)
d <- data.frame(x=x, y=y)
d$x <- scale(d$x) # standardize covariates
d_test <- data.frame(x=seq(1.5,2,.01))
set.seed(1)
NDP_res<-NDPMix(d_train = d, d_test = d_test,
formula = y ~ x,
burnin=100, iter = 200,
phi_y = c(5,10), beta_var_scale = 10000,
init_k = c(1,2), mu_scale = 2, tau_scale = .001)
c(0,4)<0
c(0,4)<0 | length(c(0,1))==1
c(0,4)<0 | length(c(0,1))==1
c(0,4)<0
set.seed(1)
NDP_res<-NDPMix(d_train = d, d_test = d_test,
formula = y ~ x,
burnin=100, iter = 200,
phi_y = c(5,10), beta_var_scale = 10000,
init_k = c(1,2), mu_scale = 2, tau_scale = .001)
devtools::install_github("stablemarkets/ChiRP")
library(ChiRP)
set.seed(1337)
# sample size
n <- 300
# true beta coefficient for x -> y
beta <- 0.5
# define logistic function for non-linear confounding
f <- function(x, p) {
p[1] / (1 + exp(-p[2] * (x - p[3])))
}
## generate the data
# d will be our data frame, z is the confounder
d <- data.frame(z=runif(n, min=-3.5, max=3.5))
# x is the independent var, non-linearly caused by
# the confounder plus noise
d$x <- f(d$z, c(-1,3,0)) + rnorm(nrow(d), sd=.1)
# y is the dependent var, non-linearly caused by
# z and linearly caused by x plus noise
d$y <- as.vector(scale(
f(d$z, c(1,3,0)) + beta*d$x + rnorm(nrow(d), sd=.1),
center=T, scale=F))
# check data
head(d)
d_test <- d
d_test$x <- d_test$x+.0000001
d_test <- d
d_test$x <- d_test$x+1
d_test_stack <- rbind(d, d_test)
library(ChiRP)
setwd("Dropbox/personal_site/")
ls
list.files()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
getwd()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
