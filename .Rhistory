omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
set.seed(2)
B = 10000
n = 100
alpha = 1
beta = 9
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
set.seed(2)
B = 10000
n = 100
alpha = 2
beta = 18
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
set.seed(2)
B = 10000
n = 100
alpha = 6
beta = 100
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
1000*.06
set.seed(2)
B = 10000
n = 100
alpha = 60
beta = 940
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
abline(v=.06)
abline(v=.06, col='red')
200*.06
200-12
set.seed(2)
B = 10000
n = 100
alpha = 12
beta = 188
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
abline(v=.06, col='red')
set.seed(2)
B = 10000
n = 100
alpha = 6
beta = 94
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws - Proportion with Event',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
abline(v=.06, col='red')
library(latex2exp)
par(mfrow=c(1,1))
set.seed(1)
B = 10000
n = 100
alpha = 1/2
beta = 1/2
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F,
main = 'Posterior Predictive Draws - Beta(1/2,1/2)',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
set.seed(2)
B = 10000
n = 100
alpha = 6
beta = 94
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws -  - Beta(6,94)',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
abline(v=.06, col='red')
par(mfrow=c(1,2))
set.seed(1)
B = 10000
n = 100
alpha = 1/2
beta = 1/2
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F,
main = 'Posterior Predictive Draws - Beta(1/2,1/2)',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
set.seed(2)
B = 10000
n = 100
alpha = 6
beta = 94
omega = rbeta(B, alpha,beta)
post_pred_mean = sapply(omega, function(omega) mean(rbinom(n, 1, omega)) )
hist(post_pred_mean,freq=F, breaks=100, xlim=c(0,1),
main = 'Posterior Predictive Draws -  - Beta(6,94)',
xlab = TeX(" $\\bar{\\bf{y}}_n^{(b)}$, for $b=1,2, ..., B= 10000$ ") )
mean(.05 < post_pred_mean & post_pred_mean < .07)
abline(v=.06, col='red')
mu = 0
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x)
plot(x, pch=20)
plot(x, pch=20, type='l')
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = .1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = .01
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .9
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .99
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = -.99
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
rho = -.9
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 0
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 3
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 3
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 3
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
mu = 3
rho = .5
sigma = 1
K=100
x = numeric(K)
x[1] = mu + sigma*rnorm(1)
for(i in 2:K){
x[i] = mu*(1-rho) + rho*x[i-1] + sigma*rnorm(1)
}
plot(x, pch=20, type='o')
load("/Users/arman/Downloads/problem2_data.Rdata")
load("/Users/arman/Downloads/problem2_data.Rdata")
set.seed(13)
true_theta = c(.6,.8)
n = 100
x1 = runif(n)
x2 = runif(n)
y = ifelse(x1 > true_theta[1] & x2 < true_theta[2], 1, ## bottom-right
ifelse(x1 <true_theta[1] & x2 < true_theta[2], 2, ## bottom-left
ifelse(x1 < true_theta[1] & x2> true_theta[2], 3, ## top-right
4 )))
table(y)
plot(true_theta[1], true_theta[2], xlim=c(0,1), ylim=c(0,1), col='red', pch=20)
points(x1, x2, pch=20, cex=.5)
counts = table(y)
alpha  = c(0,0,0,0)
post_mean_p = (counts + alpha) / (sum(counts + alpha))
## solution theta = (theta_1, theta_2) = (omega_3 + omega2, omega_1 + omega_2)
post_mean_theta1 = post_mean_p[3] + post_mean_p[2]
post_mean_theta2 = post_mean_p[1] + post_mean_p[2]
points(post_mean_theta1, post_mean_theta2, col='blue', pch=20)
exp(rnorm(1000, 0, 10))
hist(exp(rnorm(1000, 0, 10)))
summary(exp(rnorm(1000, 0, 10)))
hist(exp(rnorm(1000, 0, 1)))
summary(exp(rnorm(1000, 0, 1)))
hist(exp(rnorm(1000, 0, 2)))
summary(exp(rnorm(1000, 0, 2)))
exp(0)
exp(0 + 1.96*5 )
exp(0 - 1.96*5 )
exp(0 - 1.96*3 )
exp(0 + 1.96*3 )
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
y = rnorm(10, 50, 10)
mean(y)
mean(replicate(1000, expr = {
y = rnorm(10, 50, 10)
mean(y)
}))
mean(replicate(1000, expr = {
y = rnorm(100, 50, 10)
mean(y)
}))
mean(replicate(1000, expr = {
y = rnorm(1000, 50, 10)
mean(y)
}))
library(causalBETA)
devtools::install_github("RuBBiT-hj/causalBETA")
??causalBETA
library(causalBETA)
?causalBETA::bayeshaz()
?bayeshaz()
library(causalBETA)
?bayeshaz()
library(causalBETA)
devtools::install_github("RuBBiT-hj/causalBETA")
devtools::install_github("RuBBiT-hj/causalBETA")
install.packages('devtools')
devtools::install_github("RuBBiT-hj/causalBETA")
devtools::install_github("RuBBiT-hj/causalBETA")
library(causalBETA)
devtools::install_github("RuBBiT-hj/causalBETA")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("RuBBiT-hj/causalBETA")
devtools::install_github('stablemarkets/ChiRP')
install.packages('remotes')
remotes::install_github("RuBBiT-hj/causalBETA")
Sys.getenv("GITHUB_PAT")
github_pat
github_pat(quiet)
remotes::install_github("jrnold/ggthemes")
Sys.setenv(GITHUB_PAT = "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")
remotes::install_github("jrnold/ggthemes")
remotes::install_github("RuBBiT-hj/causalBETA")
install.packages('cmdstanr')
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
?bayeshaz()
library(causalBETA)
remotes::install_github("RuBBiT-hj/causalBETA")
library(causalBETA)
?bayeshaz()
data = survival::veteran
data$A = 1*(data$trt==2)
## rename variables
var_names = colnames(data)
colnames(data)[var_names=='status'] = 'delta'
colnames(data)[var_names=='time'] = 'y'
formula1 <- Surv(y, delta) ~ A + age + karno + celltype
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
library(splines)
formula1 <- Surv(y, delta) ~ A + bs(age,df=5)
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
bs(age,df=5)
formula1 <- Surv(y, delta) ~ A + bs(data$age,df=5)
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
formula1 <- Surv(y, delta) ~ A + bs(age,df=5)
bs(data$age, df=5)
hist(data$age)
spline_basis = bs(data$age, df=5)
View(spline_basis)
data$spline_basis = bs(data$age, df=5)
View(data)
spline_basis = bs(data$age, df=5)
colnames(spline_basis) = paste0('basis',1:5)
View(spline_basis)
formula1 <- Surv(y, delta) ~ A + basis1 + basis2 + basis3 + basis4 + basis5
data = survival::veteran
data$A = 1*(data$trt==2)
## rename variables
var_names = colnames(data)
colnames(data)[var_names=='status'] = 'delta'
colnames(data)[var_names=='time'] = 'y'
spline_basis = bs(data$age, df=5)
colnames(spline_basis) = paste0('basis',1:5)
data = cbind(data, spline_basis)
formula1 <- Surv(y, delta) ~ A + basis1 + basis2 + basis3 + basis4 + basis5
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
fm1 <- lm(weight ~ bs(height, df = 5), data = women)
tt = model.matrix(fm1)
View(tt)
summary(fm1)
summary(post_draws_ar1_adj)
class(post_draws_ar1_adj)
?summary.bayeshaz
plot(post_draws_ar1_adj)
summary(post_draws_ar1_adj$beta_draws)
library(causalBETA)
library(splines)
data = survival::veteran
data$A = 1*(data$trt==2)
## rename variables
var_names = colnames(data)
colnames(data)[var_names=='status'] = 'delta'
colnames(data)[var_names=='time'] = 'y'
## create spline basis matrix using splines::bs
spline_basis = bs(data$age, df=5)
colnames(spline_basis) = paste0('basis',1:5)
## include the bases in your data
data = cbind(data, spline_basis)
## include each basis as a covariate
formula1 <- Surv(y, delta) ~ A + basis1 + basis2 + basis3 + basis4 + basis5
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
summary(post_draws_ar1_adj$beta_draws)
setwd("google_drive/Software/personal_site/")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
