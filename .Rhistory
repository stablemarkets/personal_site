mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
calc_mean = function(x){
return(mean(x))
}
sample(x = 1:n, size = n)
x_boot = x[obs_ids]
obs_ids = sample(x = 1:n, size = n)
x_boot = x[obs_ids]
x_boot
bootstrap_mean = function(x){
## sample with replacement
n = length(x) ## number of observations
obs_ids = sample(x = 1:n, size = n)
x_boot = x[obs_ids]
return(mean(x_boot))
}
replicate(n = 1000, bootstrap_mean())
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean())
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
bootstrap_draws
set.seed(10)
n = 100
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
bootstrap_draws
bootstrap_mean(x)
bootstrap_mean(x)
bootstrap_mean(x)
obs_ids = sample(x = 1:n, size = n)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
bootstrap_draws
hist(bootstrap_draws)
hist(bootstrap_draws, freq=F)
curve(dnorm(x,10, 1/sqrt(n)), add=T, col='red')
hist(bootstrap_draws, freq=F, xlim=c(7,12))
hist(bootstrap_draws, freq=F, xlim=c(9,11))
curve(dnorm(x,10, 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws)
1/sqrt(n)
set.seed(10)
n = 1000
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, xlim=c(9,11))
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
set.seed(10)
n = 300
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, xlim=c(9,11))
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
set.seed(10)
n = 300
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, xlim=c(9,11))
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
set.seed(11)
n = 300
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, xlim=c(9,11))
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
set.seed(12)
n = 300
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, xlim=c(9,11))
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
## draws from the sampling distribution
hist(bootstrap_draws, freq=F)
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, breaks=50)
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
set.seed(12)
n = 300
x = rnorm(n, mean = 10, sd = 1)
mean(x)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, breaks=50)
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
sd(bootstrap_draws) ## estimated standard errors
1/sqrt(n) ## true standard error
set.seed(12)
n = 300
x = rnorm(n, mean = 10, sd = 1)
x
mean(x)
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
obs_ids
## bootstrap sample
x_boot = x[obs_ids]
## simulate some data
set.seed(12)
n = 300
x = rnorm(n, mean = 10, sd = 1)
bootstrap_mean = function(x){
## number of observations
n = length(x)
## sample with replacement
obs_ids = sample(x = 1:n, size = n, replace=T)
## bootstrap sample
x_boot = x[obs_ids]
## output mean of bootstrap sample
return(mean(x_boot))
}
bootstrap_draws = replicate(n = 1000, expr = bootstrap_mean(x))
## draws from the sampling distribution
hist(bootstrap_draws, freq=F, breaks=50)
## true sampling distribution N(mu, var = (sigma^2)/n )
curve(dnorm(x,mean = 10, sd = 1/sqrt(n)), add=T, col='red')
1/sqrt(n) ## true standard error
sd(bootstrap_draws) ## estimated standard errors
#----------------------------------------------------------#
### -------------- Simulate Some Data    ------------- #####
#----------------------------------------------------------#
set.seed(10)
n = 100
x = rnorm(n, mean = 0, sd = 1)
y = x + rnorm(n, mean = 0,
y = x + rnorm(n, mean = 0, sd = 1)
plot(x, y)
## what is Cov(X, Y) ?
## Cov(X, X + Z) = Var(X) + Cov(X, Z) = Var(X) = 1
## what is Var[X] = 1^2 --> SD(X) = 1
## what is Var[Y] = E[ V[Y|X] ] + V[ E[Y|X] ]
##                =  1 + V[X] = 1 + 1 = 2
## so true cor(X,Y) = Cov(X, Y)/ sd(X)sd(Y) = 1/sqrt(2)
## so,
true_corr = 1/sqrt(2)
true_corr
#----------------------------------------------------------#
### ------------ Bootstrap - Manual Approach---------- #####
#----------------------------------------------------------#
B = 1000
?cor
bootstrap_iter = function(x, y, n){
idx = sample(x = 1:n, size = n, replace = T )
x_b = x[idx]
y_b = y[idx]
cor(x_b, y_b)
}
bootstrap_dist = replicate(n = B, expr = bootstrap_iter(x,y,n) )
bootstrap_dist
hist(bootstrap_dist, breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
mean(bootstrap_dist)
sd(bootstrap_dist)
#----------------------------------------------------------#
### ------------ Bootstrap - R Package      ---------- #####
#----------------------------------------------------------#
library(boot)
?boot
library(boot)
pearson = function(data, idx ){
cor( data[idx, 1], data[idx,2] )
}
bootstrap_dist_pack = boot(data = cbind(x, y),
statistic = pearson,
R = B)
hist(bootstrap_dist_pack$t,
breaks = 50, xlim=c(0, 1),
main = 'Bootstrap distribution of rho',
xlab = 'rho')
abline(v = true_corr, col='red', lwd=2)
y = rgamma(300, 10, rate=7)
## plot simulated data
hist(y, freq=F, breaks=100)
beta_hat = mean(y)/( (mean(y^2)) - mean(y)^2)
alpha_hat = mean(y)*beta_hat
curve(dgamma(x, shape = alpha_hat, rate = beta_hat),
col='red', add=T)
y
beta_hat
alpha_hat
1-pnorm(10*5 / sqrt(5))
m = rbinom(1000, 1, .5)
x = rnorm(1000)
y = numeric(1000)
y[m==1] = rnorm(1 + 5*x, 1)
y[m==1] = rnorm(1 + 5*x[m==1], 1)
y[m==0] = rnorm(3, 1)
lm(y[m==1] ~ x[m==1])
set.seed(1)
m = rbinom(1000, 1, .5)
x = rnorm(1000)
y = numeric(1000)
y[m==1] = rnorm(1 + 5*x[m==1], 1)
y[m==0] = rnorm(3, 1)
set.seed(1)
m = rbinom(1000, 1, .5)
x = rnorm(1000)
y = numeric(1000)
y[m==1] = rnorm(sum(m==1),1 + 5*x[m==1], 1)
y[m==0] = rnorm(sum(m==1), 3, 1)
lm(y[m==1] ~ x[m==1])
lm(y[m==0] ~ 1)
mean(y)
mean(y[m==0])
lm(y ~ x*m)
xobs = ifelse(m==1, x, 0)
lm(y ~ xobs*m)
xobs
m
y
lm(y ~ xobs*m)
xobs = ifelse(m==1, x, 999)
lm(y ~ xobs*m)
xobs = ifelse(m==1, x, 0)
lm(y ~ xobs*m)
devtools::install_github("/RuBBiT-hj/causalBETA")
devtools::install_github("RuBBiT-hj/causalBETA")
library(causalBETA)
?bayeshaz
# example demo
data = survival :: veteran
data$A = 1*(data$trt==2)
## rename variables
var_names = colnames(data)
colnames(data)[var_names=='status'] = 'delta'
colnames(data)[var_names=='time'] = 'y'
formula1 <- Surv(y, delta) ~ A + age + karno + celltype
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
library(survival)
# example demo
data = survival :: veteran
data$A = 1*(data$trt==2)
## rename variables
var_names = colnames(data)
colnames(data)[var_names=='status'] = 'delta'
colnames(data)[var_names=='time'] = 'y'
formula1 <- Surv(y, delta) ~ A + age + karno + celltype
post_draws_ar1_adj = bayeshaz(
data = data,
reg_formula = formula1 ,
model = 'AR1',
A = 'A',
warmup = 1000,
post_iter = 1000,
chains = 1)
plot(post_draws_ar1_adj)
set.seed(1)
n=10
set.seed(1)
n=10
y = rpois(n, 8)
factorial(y)
sum(log(factorial(y)))
log_lik = function(lambda) = -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik(lambda))
curve(log_lik
curve(log_lik
)
curve(log_lik)
curve(log_lik, from=0, to=10)
curve(log_lik, from=0, to=15)
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda')
abline(v=mean(y)) ## plot MLE
par(mfrow=c(1,2))
abline(v=mean(y), lty=2) ## plot MLE
set.seed(1)
par(mfrow=c(1,2))
n=10
y = rpois(n, 8)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
n=100
y = rpois(n, 8)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y)) ## plot MLE
set.seed(1)
par(mfrow=c(1,2))
n=10
y = rpois(n, 8)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
n=1000
y = rpois(n, 8)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
set.seed(1)
par(mfrow=c(1,2))
n=10
y = rpois(n, 2)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
n=1000
y = rpois(n, 2)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
set.seed(1)
par(mfrow=c(1,2))
n=10
y = rpois(n, 3)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
n=1000
y = rpois(n, 3)
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
curve(log_lik, from=0, to=15, ylab='log-likelihood', xlab='lambda') ## plot log-likelihood
abline(v=mean(y), lty=2) ## plot MLE
log_lik2 = function(lambda) = sum(dpois(y, lambda, log=TRUE))
log_lik = function(lambda) -lambda*n + sum(y)*log(lambda) - sum(log(factorial(y)))
log_lik2 = function(lambda)  sum(dpois(y, lambda, log=TRUE))
log_lik(2)
log_lik(5)
log_lik2(5)
setwd("~/google_drive/Software/personal_site/")
